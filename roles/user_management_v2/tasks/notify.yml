---
# ═══════════════════════════════════════════════════════════
# EMAIL NOTIFICATION
# ═══════════════════════════════════════════════════════════

- name: "Load email configuration"
  ansible.builtin.include_vars:
    file: "{{ role_path }}/defaults/email.yml"

- name: "Get Thailand time for email"
  ansible.builtin.set_fact:
    email_completion_time: "{{ lookup('pipe', 'TZ=' + timezone + ' date +\"%-d %B %Y %H:%M:%S\"') }}"
    email_completion_date: "{{ lookup('pipe', 'TZ=' + timezone + ' date +\"%Y-%m-%d\"') }}"
    email_completion_time_only: "{{ lookup('pipe', 'TZ=' + timezone + ' date +\"%H:%M:%S\"') }}"
  when: use_thailand_timezone | bool

- name: "Check if email groups exist"
  ansible.builtin.debug:
    msg: |
      📧 Email Groups Summary:
      Total groups: {{ email_groups | length }}
      {% for email, users in email_groups.items() %}
        - {{ email }}: {{ users | length }} user(s)
      {% endfor %}
  when:
    - email_groups is defined
    - email_groups | length > 0

- name: "Skip notification if no email groups"
  ansible.builtin.debug:
    msg: "⚠️ No email recipients found. Skipping notification."
  when:
    - email_groups is not defined or email_groups | length == 0

- name: "Send email notification for each recipient"
  community.general.mail:
    to: "{{ item.key }}"
    from: "{{ email_from }}"
    reply_to: "{{ email_reply_to }}"
    cc: "{{ email_cc }}"
    bcc: "{{ email_bcc }}"
    subject: "{{ email_subject_prefix }} Account Creation Report - {{ item.value[0].sr_number }} [{{ email_completion_date }}]"
    body: "{{ lookup('template', 'email_' + email_template + '.j2') }}"
    host: "{{ smtp_host }}"
    port: "{{ smtp_port }}"
    username: "{{ smtp_username if smtp_username != '' else omit }}"
    password: "{{ smtp_password if smtp_password != '' else omit }}"
    secure: "{{ 'starttls' if smtp_use_tls else ('ssl' if smtp_use_ssl else 'never') }}"
    timeout: "{{ smtp_timeout }}"
    charset: "{{ email_charset }}"
    subtype: "{{ 'html' if 'html' in email_template else 'plain' }}"
  vars:
    requester_name: "{{ item.value[0].owner_name }}"
    requester_email: "{{ item.key }}"
    requester_tel: "{{ item.value[0].tel }}"
    sr_number: "{{ item.value[0].sr_number }}"
    completion_time: "{{ email_completion_time | default(ansible_date_time.iso8601) }}"
    completion_date: "{{ email_completion_date | default(ansible_date_time.date) }}"
    completion_time_only: "{{ email_completion_time_only | default(ansible_date_time.time) }}"
    timezone_display: "{{ timezone_display }}"
    users: "{{ item.value }}"
  loop: "{{ email_groups | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  register: mail_result
  failed_when: false
  delegate_to: localhost
  when:
    - email_groups is defined
    - email_groups | length > 0
    - not dry_run

- name: "Retry failed emails"
  community.general.mail:
    to: "{{ item.item.key }}"
    from: "{{ email_from }}"
    subject: "{{ email_subject_prefix }} Account Creation Report - {{ item.item.value[0].sr_number }} [{{ email_completion_date }}] [RETRY]"
    body: "{{ lookup('template', 'email_' + email_template + '.j2') }}"
    host: "{{ smtp_host }}"
    port: "{{ smtp_port }}"
  loop: "{{ mail_result.results }}"
  loop_control:
    label: "{{ item.item.key }}"
  when:
    - not dry_run
    - mail_result is defined
    - item.failed | default(false)
    - email_retry_count | int > 0
  retries: "{{ email_retry_count }}"
  delay: "{{ email_retry_delay }}"
  delegate_to: localhost

- name: "Display notification summary"
  ansible.builtin.debug:
    msg: |
      📧 EMAIL NOTIFICATION SUMMARY
      ════════════════════════════════════════════════════════
      🕐 Sent at: {{ email_completion_time | default(ansible_date_time.iso8601) }} ({{ timezone_display }})
      📊 Total emails sent: {{ email_groups | length }}
      ✅ Successful: {{ mail_result.results | rejectattr('failed', 'defined') | list | length }}
      ❌ Failed: {{ mail_result.results | selectattr('failed', 'defined') | selectattr('failed') | list | length }}
      
      Recipients:
      {% for email in email_groups.keys() %}
        ✉️  {{ email }} ({{ email_groups[email] | length }} user(s))
      {% endfor %}
      ════════════════════════════════════════════════════════
  when:
    - not dry_run
    - mail_result is defined
