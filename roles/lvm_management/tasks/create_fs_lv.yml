---
# === FILESYSTEM & LV CREATION ===
- name: Generate LV names for primary VG
  ansible.builtin.set_fact:
    primary_fs_dirs: "{{ enhanced_fs_config }}"
  vars:
    enhanced_fs_config: >-
      {%- set result = [] -%}
      {%- for item in parsed_fs_config -%}
        {%- if item.lv_name is defined and item.lv_name != '' -%}
          {%- set final_lv_name = item.lv_name | regex_replace('[^a-zA-Z0-9_-]', '_') -%}
        {%- else -%}
          {%- set final_lv_name = (item.path | regex_replace('^/', '') | regex_replace('[^a-zA-Z0-9_-]', '_')) + '_lv' -%}
        {%- endif -%}
        {%- set _ = result.append(item | combine({'lv_name': final_lv_name, 'vg_name': volume_group_name})) -%}
      {%- endfor -%}
      {{ result }}

- name: Generate LV names for secondary VG
  ansible.builtin.set_fact:
    secondary_fs_dirs: "{{ enhanced_fs_config2 }}"
  vars:
    enhanced_fs_config2: >-
      {%- set result = [] -%}
      {%- for item in parsed_fs_config2 -%}
        {%- if item.lv_name is defined and item.lv_name != '' -%}
          {%- set final_lv_name = item.lv_name | regex_replace('[^a-zA-Z0-9_-]', '_') -%}
        {%- else -%}
          {%- set final_lv_name = (item.path | regex_replace('^/', '') | regex_replace('[^a-zA-Z0-9_-]', '_')) + '_lv' -%}
        {%- endif -%}
        {%- set _ = result.append(item | combine({'lv_name': final_lv_name, 'vg_name': volume_group2_name})) -%}
      {%- endfor -%}
      {{ result }}
  when: 
    - split_disk
    - split_disk_secondary

# === SIZE VALIDATION & VG CREATION DECISION (Fixed) ===
- name: Calculate available space for each partition
  ansible.builtin.set_fact:
    partition1_size_mb: "{{ (partition_size_gb | int * 1024 * 0.95) | int }}"
    partition2_size_mb: "{{ (remaining_disk_gb | int * 1024 * 0.95) | int }}"

- name: Check if VGs were actually created (based on actual VG info)
  ansible.builtin.set_fact:
    actual_primary_vg_exists: "{{ primary_vg_info is defined and primary_vg_info.rc is defined and primary_vg_info.rc == 0 }}"
    actual_secondary_vg_exists: "{{ secondary_vg_info is defined and secondary_vg_info.rc is defined and secondary_vg_info.rc == 0 }}"

- name: Determine filesystem creation based on size validation
  ansible.builtin.set_fact:
    create_primary_filesystems: >-
      {%- if parsed_fs_config | length == 0 -%}
        false
      {%- elif not actual_primary_vg_exists -%}
        false
      {%- else -%}
        {{ total_fs_size_mb | int <= partition1_size_mb | int }}
      {%- endif -%}
    create_secondary_filesystems: >-
      {%- if not split_disk or not split_disk_secondary -%}
        false
      {%- elif parsed_fs_config2 | length == 0 -%}
        false
      {%- elif not actual_secondary_vg_exists -%}
        false
      {%- else -%}
        {{ total_fs2_size_mb | int <= partition2_size_mb | int }}
      {%- endif -%}

- name: Display size validation results (Fixed)
  ansible.builtin.debug:
    msg: |
      🔍 SIZE VALIDATION RESULTS:
      
      📋 Partition 1 ({{ partition_size_gb }}GB):
         💾 Available: ~{{ partition1_size_mb }}MB (after LVM overhead)
         📊 Required: {{ total_fs_size_mb }}MB
         📦 VG Exists: {{ actual_primary_vg_exists }}
         ✅ Create Filesystems: {{ create_primary_filesystems }}
         {% if parsed_fs_config | length > 0 and not create_primary_filesystems %}❌ SKIPPED: Insufficient space or VG missing{% endif %}
      
      {% if split_disk %}
      📋 Partition 2 ({{ remaining_disk_gb }}GB):
         💾 Available: ~{{ partition2_size_mb }}MB (after LVM overhead)
         📊 Required: {{ total_fs2_size_mb }}MB
         🎯 Create filesystem mode: {{ split_disk_secondary }}
         📦 VG Exists: {{ actual_secondary_vg_exists }}
         ✅ Create Filesystems: {{ create_secondary_filesystems }}
         {% if split_disk_secondary and parsed_fs_config2 | length > 0 and not create_secondary_filesystems %}❌ SKIPPED: Insufficient space or VG missing{% endif %}
      {% endif %}

- name: Display final validation summary (Fixed)
  ansible.builtin.debug:
    msg: |
      ✅ FINAL VALIDATION SUMMARY:
      📀 Disk: {{ base_disk }} ({{ disk_size_gb }}GB)
      🔧 Strategy: {{ partition_strategy }}
      📊 Split disk: {{ split_disk }}
      🎯 Create secondary filesystem: {{ split_disk_secondary }}
      
      📦 FILESYSTEM CREATION PLAN:
      ├── Primary VG ({{ volume_group_name }}): {{ 'CREATE FS' if create_primary_filesystems else 'SKIP FS' }}
      │   {% if create_primary_filesystems %}├── Filesystems: {{ parsed_fs_config | length }}{% endif %}
      │   {% if not create_primary_filesystems and parsed_fs_config | length > 0 %}└── Reason: Size {{ total_fs_size_mb }}MB > Available {{ partition1_size_mb }}MB{% endif %}
      {% if split_disk %}
      └── Secondary VG ({{ volume_group2_name }}): {{ 'CREATE FS' if create_secondary_filesystems else 'VG ONLY' if actual_secondary_vg_exists else 'SKIP ALL' }}
          {% if create_secondary_filesystems %}├── Filesystems: {{ parsed_fs_config2 | length }}{% endif %}
          {% if not create_secondary_filesystems and split_disk_secondary and parsed_fs_config2 | length > 0 %}└── Reason: Size {{ total_fs2_size_mb }}MB > Available {{ partition2_size_mb }}MB{% endif %}
      {% endif %}

# === CREATE LOGICAL VOLUMES (Fixed conditions) ===
- name: Create logical volumes (primary VG)
  community.general.lvol:
    vg: "{{ volume_group_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.size_mb }}M"