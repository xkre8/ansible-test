---
# === FILESYSTEM & LV CREATION ===
- name: Generate LV names for primary VG
  ansible.builtin.set_fact:
    primary_fs_dirs: "{{ enhanced_fs_config }}"
  vars:
    enhanced_fs_config: >-
      {%- set result = [] -%}
      {%- for item in parsed_fs_config -%}
        {%- if item.lv_name is defined and item.lv_name != '' -%}
          {%- set final_lv_name = item.lv_name | regex_replace('[^a-zA-Z0-9_-]', '_') -%}
        {%- else -%}
          {%- set final_lv_name = (item.path | regex_replace('^/', '') | regex_replace('[^a-zA-Z0-9_-]', '_')) + '_lv' -%}
        {%- endif -%}
        {%- set _ = result.append(item | combine({'lv_name': final_lv_name, 'vg_name': volume_group_name})) -%}
      {%- endfor -%}
      {{ result }}

- name: Generate LV names for secondary VG
  ansible.builtin.set_fact:
    secondary_fs_dirs: "{{ enhanced_fs_config2 }}"
  vars:
    enhanced_fs_config2: >-
      {%- set result = [] -%}
      {%- for item in parsed_fs_config2 -%}
        {%- if item.lv_name is defined and item.lv_name != '' -%}
          {%- set final_lv_name = item.lv_name | regex_replace('[^a-zA-Z0-9_-]', '_') -%}
        {%- else -%}
          {%- set final_lv_name = (item.path | regex_replace('^/', '') | regex_replace('[^a-zA-Z0-9_-]', '_')) + '_lv' -%}
        {%- endif -%}
        {%- set _ = result.append(item | combine({'lv_name': final_lv_name, 'vg_name': volume_group2_name})) -%}
      {%- endfor -%}
      {{ result }}
  when: split_disk

# === SIZE VALIDATION ===
- name: Validate primary VG has enough space
  ansible.builtin.assert:
    that:
      - "{{ total_fs_size_mb }} <= {{ primary_vg_info.stdout.split()[1] | int }}"
    fail_msg: "Insufficient space in {{ volume_group_name }}. Required: {{ total_fs_size_mb }}MB, Available: {{ primary_vg_info.stdout.split()[1] }}MB"
  when: primary_fs_dirs | length > 0

- name: Validate secondary VG has enough space
  ansible.builtin.assert:
    that:
      - "{{ total_fs2_size_mb }} <= {{ secondary_vg_info.stdout.split()[1] | int }}"
    fail_msg: "Insufficient space in {{ volume_group2_name }}. Required: {{ total_fs2_size_mb }}MB, Available: {{ secondary_vg_info.stdout.split()[1] }}MB"
  when: 
    - split_disk
    - secondary_fs_dirs | length > 0

# === CREATE LOGICAL VOLUMES ===
- name: Create logical volumes (primary VG)
  community.general.lvol:
    vg: "{{ volume_group_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.size_mb }}M"
    state: present
  loop: "{{ primary_fs_dirs }}"
  when: primary_fs_dirs | length > 0

- name: Create logical volumes (secondary VG)
  community.general.lvol:
    vg: "{{ volume_group2_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.size_mb }}M"
    state: present
  loop: "{{ secondary_fs_dirs }}"
  when: 
    - split_disk
    - secondary_fs_dirs | length > 0

# === CREATE FILESYSTEMS ===
- name: Create filesystems (primary VG)
  community.general.filesystem:
    fstype: "{{ item.fstype }}"
    dev: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    state: present
  loop: "{{ primary_fs_dirs }}"
  when: primary_fs_dirs | length > 0

- name: Create filesystems (secondary VG)
  community.general.filesystem:
    fstype: "{{ item.fstype }}"
    dev: "/dev/{{ volume_group2_name }}/{{ item.lv_name }}"
    state: present
  loop: "{{ secondary_fs_dirs }}"
  when: 
    - split_disk
    - secondary_fs_dirs | length > 0

# === CREATE MOUNT POINTS ===
- name: Create mount points (primary VG)
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: '0755'
  loop: "{{ primary_fs_dirs }}"
  when: primary_fs_dirs | length > 0

- name: Create mount points (secondary VG)
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: '0755'
  loop: "{{ secondary_fs_dirs }}"
  when: 
    - split_disk
    - secondary_fs_dirs | length > 0

# === MOUNT FILESYSTEMS ===
- name: Mount filesystems (primary VG)
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/mapper/{{ volume_group_name }}-{{ item.lv_name }}"
    fstype: "{{ item.fstype }}"
    opts: defaults
    state: mounted
  loop: "{{ primary_fs_dirs }}"
  when: primary_fs_dirs | length > 0

- name: Mount filesystems (secondary VG)
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/mapper/{{ volume_group2_name }}-{{ item.lv_name }}"
    fstype: "{{ item.fstype }}"
    opts: defaults
    state: mounted
  loop: "{{ secondary_fs_dirs }}"
  when: 
    - split_disk
    - secondary_fs_dirs | length > 0