---
# === FILESYSTEM & LV CREATION ===
- name: Generate LV names for primary VG
  ansible.builtin.set_fact:
    primary_fs_dirs: "{{ enhanced_fs_config }}"
  vars:
    enhanced_fs_config: >-
      {%- set result = [] -%}
      {%- for item in parsed_fs_config -%}
        {%- if item.lv_name is defined and item.lv_name != '' -%}
          {%- set final_lv_name = item.lv_name | regex_replace('[^a-zA-Z0-9_-]', '_') -%}
        {%- else -%}
          {%- set final_lv_name = (item.path | regex_replace('^/', '') | regex_replace('[^a-zA-Z0-9_-]', '_')) + '_lv' -%}
        {%- endif -%}
        {%- set _ = result.append(item | combine({'lv_name': final_lv_name, 'vg_name': volume_group_name})) -%}
      {%- endfor -%}
      {{ result }}

- name: Generate LV names for secondary VG
  ansible.builtin.set_fact:
    secondary_fs_dirs: "{{ enhanced_fs_config2 }}"
  vars:
    enhanced_fs_config2: >-
      {%- set result = [] -%}
      {%- for item in parsed_fs_config2 -%}
        {%- if item.lv_name is defined and item.lv_name != '' -%}
          {%- set final_lv_name = item.lv_name | regex_replace('[^a-zA-Z0-9_-]', '_') -%}
        {%- else -%}
          {%- set final_lv_name = (item.path | regex_replace('^/', '') | regex_replace('[^a-zA-Z0-9_-]', '_')) + '_lv' -%}
        {%- endif -%}
        {%- set _ = result.append(item | combine({'lv_name': final_lv_name, 'vg_name': volume_group2_name})) -%}
      {%- endfor -%}
      {{ result }}
  when: 
    - split_disk
    - split_disk_secondary

# === SIZE VALIDATION & VG CREATION DECISION ===
- name: Calculate available space for each partition
  ansible.builtin.set_fact:
    partition1_size_mb: "{{ (partition_size_gb | int * 1024 * 0.95) | int }}"  # 95% usable (LVM overhead)
    partition2_size_mb: "{{ (remaining_disk_gb | int * 1024 * 0.95) | int }}"  # 95% usable (LVM overhead)

- name: Determine VG creation based on filesystem requirements
  ansible.builtin.set_fact:
    create_primary_vg: >-
      {%- if parsed_fs_config | length == 0 -%}
        true
      {%- else -%}
        {{ total_fs_size_mb | int <= partition1_size_mb | int }}
      {%- endif -%}
    create_secondary_vg: >-
      {%- if not split_disk -%}
        false
      {%- elif not split_disk_secondary -%}
        true
      {%- elif parsed_fs_config2 | length == 0 -%}
        true
      {%- else -%}
        {{ total_fs2_size_mb | int <= partition2_size_mb | int }}
      {%- endif -%}

- name: Display size validation results
  ansible.builtin.debug:
    msg: |
      🔍 SIZE VALIDATION RESULTS:
      
      📋 Partition 1 ({{ partition_size_gb }}GB):
         💾 Available: ~{{ partition1_size_mb }}MB (after LVM overhead)
         📊 Required: {{ total_fs_size_mb }}MB
         ✅ Create VG: {{ create_primary_vg }}
         {% if not create_primary_vg %}❌ REASON: Insufficient space for filesystems{% endif %}
      
      {% if split_disk %}
      📋 Partition 2 ({{ remaining_disk_gb }}GB):
         💾 Available: ~{{ partition2_size_mb }}MB (after LVM overhead)
         📊 Required: {{ total_fs2_size_mb }}MB
         🎯 Create filesystem: {{ split_disk_secondary }}
         ✅ Create VG: {{ create_secondary_vg }}
         {% if split_disk_secondary and not create_secondary_vg %}❌ REASON: Insufficient space for filesystems{% endif %}
      {% endif %}

- name: Fail if primary VG cannot be created but filesystems are required
  ansible.builtin.fail:
    msg: |
      ❌ VALIDATION FAILED:
      Primary VG ({{ volume_group_name }}) cannot accommodate required filesystems.
      Required: {{ total_fs_size_mb }}MB
      Available: ~{{ partition1_size_mb }}MB
      Please reduce filesystem sizes or increase partition_size_gb.
  when: 
    - parsed_fs_config | length > 0
    - not create_primary_vg

- name: Display final validation summary
  ansible.builtin.debug:
    msg: |
      ✅ FINAL VALIDATION SUMMARY:
      📀 Disk: {{ base_disk }} ({{ disk_size_gb }}GB)
      🔧 Strategy: {{ partition_strategy }}
      📊 Split disk: {{ split_disk }}
      🎯 Create secondary filesystem: {{ split_disk_secondary }}
      
      📦 VG CREATION PLAN:
      ├── Primary VG ({{ volume_group_name }}): {{ 'CREATE' if create_primary_vg else 'SKIP' }}
      │   {% if create_primary_vg and parsed_fs_config | length > 0 %}├── Filesystems: {{ parsed_fs_config | length }}{% endif %}
      │   {% if not create_primary_vg %}└── Reason: Insufficient space{% endif %}
      {% if split_disk %}
      └── Secondary VG ({{ volume_group2_name }}): {{ 'CREATE' if create_secondary_vg else 'SKIP' }}
          {% if create_secondary_vg and split_disk_secondary and parsed_fs_config2 | length > 0 %}├── Filesystems: {{ parsed_fs_config2 | length }}{% endif %}
          {% if create_secondary_vg and not split_disk_secondary %}├── VG Only (no filesystems){% endif %}
          {% if not create_secondary_vg %}└── Reason: Insufficient space for required filesystems{% endif %}
      {% endif %}

# === CREATE LOGICAL VOLUMES ===
- name: Create logical volumes (primary VG)
  community.general.lvol:
    vg: "{{ volume_group_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.size_mb }}M"
    state: present
  loop: "{{ primary_fs_dirs }}"
  when: 
    - create_primary_vg | default(true)
    - primary_fs_dirs | length > 0

- name: Create logical volumes (secondary VG)
  community.general.lvol:
    vg: "{{ volume_group2_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.size_mb }}M"
    state: present
  loop: "{{ secondary_fs_dirs }}"
  when: 
    - split_disk
    - split_disk_secondary
    - create_secondary_vg | default(false)
    - secondary_fs_dirs | length > 0

# === CREATE FILESYSTEMS ===
- name: Create filesystems (primary VG)
  community.general.filesystem:
    fstype: "{{ item.fstype }}"
    dev: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    state: present
  loop: "{{ primary_fs_dirs }}"
  when: 
    - create_primary_vg | default(true)
    - primary_fs_dirs | length > 0

- name: Create filesystems (secondary VG)
  community.general.filesystem:
    fstype: "{{ item.fstype }}"
    dev: "/dev/{{ volume_group2_name }}/{{ item.lv_name }}"
    state: present
  loop: "{{ secondary_fs_dirs }}"
  when: 
    - split_disk
    - split_disk_secondary
    - create_secondary_vg | default(false)
    - secondary_fs_dirs | length > 0

# === CREATE MOUNT POINTS ===
- name: Create mount points (primary VG)
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: '0755'
  loop: "{{ primary_fs_dirs }}"
  when: 
    - create_primary_vg | default(true)
    - primary_fs_dirs | length > 0

- name: Create mount points (secondary VG)
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: '0755'
  loop: "{{ secondary_fs_dirs }}"
  when: 
    - split_disk
    - split_disk_secondary
    - create_secondary_vg | default(false)
    - secondary_fs_dirs | length > 0

# === MOUNT FILESYSTEMS ===
- name: Mount filesystems (primary VG)
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/mapper/{{ volume_group_name }}-{{ item.lv_name }}"
    fstype: "{{ item.fstype }}"
    opts: defaults
    state: mounted
  loop: "{{ primary_fs_dirs }}"
  when: 
    - create_primary_vg | default(true)
    - primary_fs_dirs | length > 0

- name: Mount filesystems (secondary VG)
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/mapper/{{ volume_group2_name }}-{{ item.lv_name }}"
    fstype: "{{ item.fstype }}"
    opts: defaults
    state: mounted
  loop: "{{ secondary_fs_dirs }}"
  when: 
    - split_disk
    - split_disk_secondary
    - create_secondary_vg | default(false)
    - secondary_fs_dirs | length > 0