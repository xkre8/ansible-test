---
- name: Install LVM packages
  ansible.builtin.package:
    name: lvm2
    state: present

- name: Debug raw filesystem_config input
  ansible.builtin.debug:
    msg: |
      üîç Raw filesystem_config:
      {{ filesystem_config | default('NOT_SET') }}

- name: Parse filesystem configuration with error handling
  block:
    - name: Parse YAML configuration
      ansible.builtin.set_fact:
        filesystem_dirs: "{{ filesystem_config | from_yaml }}"
      when: 
        - filesystem_config is defined
        - filesystem_config != ""

    - name: Set empty list if no configuration
      ansible.builtin.set_fact:
        filesystem_dirs: []
      when: filesystem_config is not defined or filesystem_config == ""

  rescue:
    - name: Fail with YAML parsing error
      ansible.builtin.fail:
        msg: |
          ‚ùå Invalid YAML in filesystem_config!
          
          Raw input: {{ filesystem_config }}
          
          Expected format:
          - path: /data
            lv_name: lv_data
            size_mb: 2000
            fstype: xfs

- name: Debug filesystem configuration
  ansible.builtin.debug:
    msg: |
      üîç Filesystem Configuration Debug:
      {% for fs in filesystem_dirs %}
      {{ loop.index }}. Path: {{ fs.path }}
         LV: {{ fs.lv_name }}
         Size: {{ fs.size_mb }}MB
         FS: {{ fs.fstype | default('xfs') }}
      {% endfor %}

- name: Check for duplicate paths
  ansible.builtin.fail:
    msg: |
      ‚ùå Duplicate mount paths detected!
      
      Duplicates found: {{ filesystem_dirs | map(attribute='path') | list | select('equalto', item) | list | length }}x {{ item }}
      
      Each mount path must be unique!
  when: (filesystem_dirs | map(attribute='path') | list).count(item) > 1
  loop: "{{ filesystem_dirs | map(attribute='path') | unique | list }}"

- name: Check for duplicate LV names
  ansible.builtin.fail:
    msg: |
      ‚ùå Duplicate Logical Volume names detected!
      
      Duplicates found: {{ filesystem_dirs | map(attribute='lv_name') | list | select('equalto', item) | list | length }}x {{ item }}
      
      Each LV name must be unique!
  when: (filesystem_dirs | map(attribute='lv_name') | list).count(item) > 1
  loop: "{{ filesystem_dirs | map(attribute='lv_name') | unique | list }}"

- name: Calculate total requested LV size
  ansible.builtin.set_fact:
    total_requested_mb: "{{ filesystem_dirs | map(attribute='size_mb') | map('int') | sum }}"

- name: Display size calculation
  ansible.builtin.debug:
    msg: |
      üìä LV Size Calculation:
      {% for fs in filesystem_dirs %}
      - {{ fs.lv_name }}: {{ fs.size_mb }}MB
      {% endfor %}
      
      üìà Total Requested: {{ total_requested_mb }}MB ({{ (total_requested_mb | int / 1024) | round(2) }}GB)

- name: Validate configuration
  ansible.builtin.include_tasks: validate.yml

- name: Set target device
  ansible.builtin.set_fact:
    target_device: >-
      {%- if pv_strategy == 'use_existing_pv' -%}
        {{ existing_pv_device }}
      {%- elif manual_lvm_device != '' -%}
        {{ manual_lvm_device }}
      {%- elif selected_disk_name != '' -%}
        {{ '/dev/' + selected_disk_name }}
      {%- endif -%}

# === PHYSICAL VOLUME ===
- name: Create Physical Volume (if needed)
  ansible.builtin.command: pvcreate {{ target_device }}
  register: pv_result
  failed_when: pv_result.rc != 0 and 'already' not in pv_result.stderr
  changed_when: pv_result.rc == 0 and 'already' not in pv_result.stderr
  when: 
    - pv_strategy == 'create_new_pv'
    - vg_strategy in ['create_new', 'extend_existing']

# === VOLUME GROUP ===
- name: Create/Extend Volume Group
  community.general.lvg:
    vg: "{{ volume_group_name }}"
    pvs: "{{ target_device }}"
    state: present
  when: vg_strategy in ['create_new', 'extend_existing']

# === SIZE VALIDATION (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á LV) ===
- name: Get Volume Group size information
  ansible.builtin.command: vgs --noheadings --units m "{{ volume_group_name }}" -o vg_size,vg_free
  register: vg_size_info
  changed_when: false
  when: filesystem_dirs | length > 0

- name: Parse VG size information
  ansible.builtin.set_fact:
    vg_total_mb: "{{ vg_size_info.stdout.split()[0] | regex_replace('[^0-9]', '') | int }}"
    vg_free_mb: "{{ vg_size_info.stdout.split()[1] | regex_replace('[^0-9]', '') | int }}"
  when: vg_size_info is defined

- name: Display Volume Group information
  ansible.builtin.debug:
    msg: |
      üì¶ Volume Group: {{ volume_group_name }}
      üíæ Total Size: {{ vg_total_mb }}MB ({{ (vg_total_mb | int / 1024) | round(2) }}GB)
      üÜì Free Space: {{ vg_free_mb }}MB ({{ (vg_free_mb | int / 1024) | round(2) }}GB)
      üìä Requested: {{ total_requested_mb }}MB ({{ (total_requested_mb | int / 1024) | round(2) }}GB)
      
      {% if (total_requested_mb | int) > (vg_free_mb | int) %}
      ‚ùå INSUFFICIENT SPACE - WILL NOT CREATE ANY LVs!
      üìâ Short by: {{ (total_requested_mb | int) - (vg_free_mb | int) }}MB
      {% else %}
      ‚úÖ Sufficient space available
      üìä Remaining: {{ (vg_free_mb | int) - (total_requested_mb | int) }}MB
      {% endif %}
  when: vg_size_info is defined

- name: PRE-FLIGHT CHECK - Stop execution if total size exceeds available space
  ansible.builtin.fail:
    msg: |
      üö® PRE-FLIGHT CHECK FAILED: TOTAL LV SIZE EXCEEDS AVAILABLE SPACE!
      
      üì¶ Volume Group: {{ volume_group_name }}
      üíæ Total VG Size: {{ vg_total_mb }}MB ({{ (vg_total_mb | int / 1024) | round(2) }}GB)
      üÜì Available Space: {{ vg_free_mb }}MB ({{ (vg_free_mb | int / 1024) | round(2) }}GB)
      
      üìä Requested Logical Volumes:
      {% for fs in filesystem_dirs %}
      {{ loop.index }}. {{ fs.lv_name }}: {{ fs.size_mb }}MB ({{ (fs.size_mb | int / 1024) | round(2) }}GB) ‚Üí {{ fs.path }}
      {% endfor %}
      
      üìà Total Requested: {{ total_requested_mb }}MB ({{ (total_requested_mb | int / 1024) | round(2) }}GB)
      üìâ Space Shortage: {{ (total_requested_mb | int) - (vg_free_mb | int) }}MB ({{ ((total_requested_mb | int - vg_free_mb | int) / 1024) | round(2) }}GB)
      
      üö´ NO LOGICAL VOLUMES WILL BE CREATED TO PREVENT PARTIAL DEPLOYMENT!
      
      üí° Solutions:
      {% if vg_strategy == 'use_existing' %}
      1. Reduce total LV sizes in filesystem_config
      2. Change strategy to 'extend_existing' and add more disks  
      3. Free up existing space in VG: {{ volume_group_name }}
      {% elif vg_strategy in ['create_new', 'extend_existing'] %}
      1. Use larger disk(s) - need at least {{ ((total_requested_mb | int / 1024) | round(1) }}GB
      2. Reduce total LV sizes in filesystem_config
      3. Split across multiple Volume Groups
      {% endif %}
      
      ‚ö†Ô∏è  NO CHANGES MADE TO PREVENT PARTIAL DEPLOYMENT
      Current VG Status: {{ vg_free_mb }}MB available, {{ total_requested_mb }}MB needed
  when:
    - vg_size_info is defined
    - (total_requested_mb | int) > (vg_free_mb | int)

# === LOGICAL VOLUMES (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö) ===
- name: Create Logical Volumes
  community.general.lvol:
    vg: "{{ volume_group_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.size_mb }}m"
    state: present
  loop: "{{ filesystem_dirs }}"

# === FILESYSTEMS ===
- name: Create filesystems
  community.general.filesystem:
    fstype: "{{ item.fstype | default('xfs') }}"
    dev: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    force: no
  loop: "{{ filesystem_dirs }}"

- name: Create mount directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
  loop: "{{ filesystem_dirs }}"

- name: Mount filesystems
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    fstype: "{{ item.fstype | default('xfs') }}"
    opts: "{{ item.mount_opts | default('defaults') }}"
    state: mounted
  loop: "{{ filesystem_dirs }}"

- name: Display summary
  ansible.builtin.include_tasks: summary.yml