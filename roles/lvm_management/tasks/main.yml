---
- name: Install LVM and filesystem packages
  ansible.builtin.package:
    name:
      - lvm2
      - xfsprogs
      - e2fsprogs
      - parted
    state: present

- name: Parse filesystem configuration
  ansible.builtin.set_fact:
    filesystem_dirs: "{{ (filesystem_config | from_yaml) if filesystem_config is defined else [] }}"

- name: Generate LV names for empty lv_name fields
  ansible.builtin.set_fact:
    filesystem_dirs: "{{ processed_filesystems }}"
  vars:
    processed_filesystems: >-
      {%- set result = [] -%}
      {%- for item in filesystem_dirs -%}
        {%- if item.lv_name is defined and item.lv_name != '' -%}
          {%- set clean_lv_name = item.lv_name | regex_replace('[^a-zA-Z0-9_-]', '_') -%}
          {%- set final_lv_name = clean_lv_name -%}
        {%- else -%}
          {%- set auto_lv_name = volume_group_name + '_' + (item.path | regex_replace('^/', '') | regex_replace('[^a-zA-Z0-9_-]', '_')) -%}
          {%- set final_lv_name = auto_lv_name -%}
        {%- endif -%}
        {%- set processed_item = item | combine({'lv_name': final_lv_name}) -%}
        {%- set _ = result.append(processed_item) -%}
      {%- endfor -%}
      {{ result }}
  when: filesystem_dirs | length > 0

- name: Calculate total requested LV size
  ansible.builtin.set_fact:
    total_requested_mb: "{{ filesystem_dirs | map(attribute='size_mb') | map('int') | sum }}"
  when: filesystem_dirs | length > 0

- name: Validate configuration
  ansible.builtin.include_tasks: validate.yml

# Set base disk for partition operations
- name: Set base disk device
  ansible.builtin.set_fact:
    base_disk: >-
      {%- if pv_strategy == 'use_existing_pv' -%}
        {{ existing_pv_device }}
      {%- elif manual_lvm_device != '' -%}
        {{ manual_lvm_device }}
      {%- elif selected_disk_name != '' -%}
        {{ '/dev/' + selected_disk_name }}
      {%- endif -%}

- name: "Debug partition strategy"
  ansible.builtin.debug:
    msg: |
      Partition Strategy: {{ partition_strategy }}
      Base Disk: {{ base_disk }}
      Partition Size: {{ partition_size_gb }}GB
      Conditions for partition.yml:
      - partition_strategy == 'create_partition': {{ partition_strategy == 'create_partition' }}
      - vg_strategy in ['create_new', 'extend_existing']: {{ vg_strategy in ['create_new', 'extend_existing'] }}
      - base_disk defined and not empty: {{ base_disk is defined and base_disk != "" }}
      Will run partition.yml: {{ (partition_strategy == 'create_partition') and (vg_strategy in ['create_new', 'extend_existing']) and (base_disk is defined and base_disk != "") }}

# Handle partition creation or set whole disk
- name: Handle partition creation
  ansible.builtin.include_tasks: partition.yml
  when: 
    - partition_strategy == 'create_partition'
    - vg_strategy in ['create_new', 'extend_existing']
    - base_disk is defined and base_disk != ""

# Handle partition creation or set whole disk
- name: Handle partition creation
  ansible.builtin.include_tasks: partition.yml
  when: 
    - partition_strategy == 'create_partition'
    - vg_strategy in ['create_new', 'extend_existing']
    - base_disk is defined and base_disk != ""

# เพิ่ม debug หลัง include partition.yml
- name: Debug target device after partition.yml
  ansible.builtin.debug:
    msg: |
      After partition.yml:
      - partition_strategy: {{ partition_strategy }}
      - base_disk: {{ base_disk | default('undefined') }}
      - target_device: {{ target_device | default('undefined') }}
      - partition.yml was run: {{ (partition_strategy == 'create_partition') and (vg_strategy in ['create_new', 'extend_existing']) and (base_disk is defined and base_disk != "") }}

# Set target device for whole disk strategy
- name: Set target device for whole disk strategy
  ansible.builtin.set_fact:
    target_device: "{{ base_disk }}"
  when: 
    - partition_strategy == 'use_whole_disk'
    - base_disk is defined
    - base_disk != ""

# Set target device for existing PV
- name: Set target device for existing PV
  ansible.builtin.set_fact:
    target_device: "{{ existing_pv_device }}"
  when: 
    - pv_strategy == 'use_existing_pv'
    - existing_pv_device != ""

# เพิ่ม fallback ถ้า target_device ยังไม่ถูก set
- name: Set fallback target device
  ansible.builtin.set_fact:
    target_device: "{{ base_disk }}"
  when: 
    - target_device is not defined or target_device == ""
    - base_disk is defined and base_disk != ""

- name: Debug final target device
  ansible.builtin.debug:
    msg: |
      Final Configuration:
      - Strategy: {{ partition_strategy }}
      - Base disk: {{ base_disk }}
      - Target device: {{ target_device }}
      {% if partition_strategy == 'create_partition' %}
      - Partition size: {{ partition_size_gb }}GB
      {% endif %}
      
      Device validation:
      - target_device defined: {{ target_device is defined }}
      - target_device not empty: {{ target_device != "" if target_device is defined else false }}
      
# ❌ ลบส่วนนี้ออก - เพราะทับซ้อนกับ partition.yml
# - name: Set final target device
#   ansible.builtin.set_fact:
#     target_device: "{{ target_device | default(base_disk) }}"

# ❌ ลบส่วนนี้ออก - เพราะทับซ้อนกับ partition.yml  
# - name: Set target device
#   ansible.builtin.set_fact:
#     target_device: >-
#       {%- if pv_strategy == 'use_existing_pv' -%}
#         {{ existing_pv_device }}
#       {%- elif manual_lvm_device != '' -%}
#         {{ manual_lvm_device }}
#       {%- elif selected_disk_name != '' -%}
#         {{ '/dev/' + selected_disk_name }}
#       {%- endif -%}

# ✅ เพิ่มส่วนนี้ - set target_device ถ้า use_whole_disk
- name: Set target device for whole disk strategy
  ansible.builtin.set_fact:
    target_device: "{{ base_disk }}"
  when: 
    - partition_strategy == 'use_whole_disk'

- name: Set target device for existing PV
  ansible.builtin.set_fact:
    target_device: "{{ existing_pv_device }}"
  when: 
    - pv_strategy == 'use_existing_pv'
    - existing_pv_device != ""

# เพิ่ม fallback ถ้า target_device ยังไม่ถูก set
- name: Set fallback target device
  ansible.builtin.set_fact:
    target_device: "{{ base_disk }}"
  when: 
    - target_device is not defined or target_device == ""
    - base_disk is defined and base_disk != ""

- name: Debug final target device
  ansible.builtin.debug:
    msg: |
      Final Configuration:
      - Strategy: {{ partition_strategy }}
      - Base disk: {{ base_disk }}
      - Target device: {{ target_device }}
      {% if partition_strategy == 'create_partition' %}
      - Partition size: {{ partition_size_gb }}GB
      {% endif %}

# === PHYSICAL VOLUME ===
- name: Create Physical Volume (if needed)
  ansible.builtin.command: pvcreate {{ target_device }}
  register: pv_result
  failed_when: pv_result.rc != 0 and 'already' not in pv_result.stderr
  changed_when: pv_result.rc == 0 and 'already' not in pv_result.stderr
  when: 
    - pv_strategy == 'create_new_pv'
    - vg_strategy in ['create_new', 'extend_existing']
    - target_device is defined and target_device != ""

# === VOLUME GROUP ===
- name: Create/Extend Volume Group
  community.general.lvg:
    vg: "{{ volume_group_name }}"
    pvs: "{{ target_device }}"
    state: present
  when: 
    - vg_strategy in ['create_new', 'extend_existing']
    - target_device is defined and target_device != ""

- name: Debug PV/VG creation results
  ansible.builtin.shell: |
    echo "=== PHYSICAL VOLUMES ==="
    pvs 2>/dev/null || echo "No PVs found"
    echo ""
    echo "=== VOLUME GROUPS ==="
    vgs 2>/dev/null || echo "No VGs found"
    echo ""
    echo "=== LSBLK OUTPUT ==="
    lsblk {{ base_disk }} 2>/dev/null || echo "Base disk not found: {{ base_disk }}"
    echo ""
    echo "=== TARGET DEVICE CHECK ==="
    if [ -b "{{ target_device }}" ]; then
      echo "Target device {{ target_device }} exists"
      ls -la "{{ target_device }}"
    else
      echo "Target device {{ target_device }} NOT FOUND!"
    fi
  register: debug_info
  changed_when: false

- name: Display debug information
  ansible.builtin.debug:
    msg: |
      {{ debug_info.stdout }}
      
      Variables:
      - partition_strategy: {{ partition_strategy }}
      - base_disk: {{ base_disk }}
      - target_device: {{ target_device | default('undefined') }}
      - vg_strategy: {{ vg_strategy }}
      - pv_strategy: {{ pv_strategy }}

# === SIZE VALIDATION ===
- name: Get Volume Group size and validate
  ansible.builtin.shell: |
    vg_info=$(vgs --noheadings --units m "{{ volume_group_name }}" -o vg_free 2>/dev/null || echo "0")
    vg_free_mb=$(echo "$vg_info" | sed 's/[^0-9.]//g' | cut -d. -f1)
    total_requested={{ total_requested_mb | default(0) }}
    
    if [ "$total_requested" -gt "$vg_free_mb" ]; then
      echo "FAIL: Requested ${total_requested}MB exceeds available ${vg_free_mb}MB"
      exit 1
    else
      echo "PASS: ${vg_free_mb}MB available, ${total_requested}MB requested"
      exit 0
    fi
  register: size_check
  failed_when: size_check.rc != 0
  changed_when: false
  when: filesystem_dirs | length > 0

- name: Display size validation result
  ansible.builtin.debug:
    msg: "{{ size_check.stdout }}"
  when: size_check is defined

# === LOGICAL VOLUMES ===
- name: Create Logical Volumes
  community.general.lvol:
    vg: "{{ volume_group_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.size_mb }}m"
    state: present
  loop: "{{ filesystem_dirs }}"
  when: filesystem_dirs | length > 0

# === FILESYSTEMS ===
- name: Create filesystems
  community.general.filesystem:
    fstype: "{{ item.fstype | default('xfs') }}"
    dev: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    force: no
  loop: "{{ filesystem_dirs }}"
  when: filesystem_dirs | length > 0

- name: Create mount directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
  loop: "{{ filesystem_dirs }}"
  when: filesystem_dirs | length > 0

- name: Mount filesystems with correct dump/pass values
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/mapper/{{ volume_group_name | regex_replace('-', '--') }}-{{ item.lv_name }}"
    fstype: "{{ item.fstype | default('xfs') }}"
    opts: "{{ item.mount_opts | default('defaults') }}"
    dump: >-
      {%- if (item.fstype | default('xfs')) == 'xfs' -%}
      0
      {%- elif (item.fstype | default('xfs')) in ['ext4', 'ext3', 'ext2'] -%}
      1
      {%- else -%}
      0
      {%- endif -%}
    passno: >-
      {%- if (item.fstype | default('xfs')) == 'xfs' -%}
      0
      {%- elif (item.fstype | default('xfs')) in ['ext4', 'ext3', 'ext2'] -%}
      2
      {%- else -%}
      0
      {%- endif -%}
    state: mounted
  loop: "{{ filesystem_dirs }}"
  when: filesystem_dirs | length > 0

- name: Display summary
  ansible.builtin.include_tasks: summary.yml