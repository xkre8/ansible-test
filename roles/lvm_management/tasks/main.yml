---
- name: Install LVM packages
  ansible.builtin.package:
    name: [lvm2, xfsprogs, e2fsprogs, parted]
    state: present

- name: Parse filesystem configuration
  ansible.builtin.set_fact:
    filesystem_dirs: "{{ (filesystem_config | from_yaml) if filesystem_config is defined else [] }}"

- name: Generate LV names
  ansible.builtin.set_fact:
    filesystem_dirs: "{{ processed_filesystems }}"
  vars:
    processed_filesystems: >-
      {%- set result = [] -%}
      {%- for item in filesystem_dirs -%}
        {%- if item.lv_name is defined and item.lv_name != '' -%}
          {%- set final_lv_name = item.lv_name | regex_replace('[^a-zA-Z0-9_-]', '_') -%}
        {%- else -%}
          {%- set final_lv_name = volume_group_name + '_' + (item.path | regex_replace('^/', '') | regex_replace('[^a-zA-Z0-9_-]', '_')) -%}
        {%- endif -%}
        {%- set _ = result.append(item | combine({'lv_name': final_lv_name})) -%}
      {%- endfor -%}
      {{ result }}
  when: filesystem_dirs | length > 0

- name: Calculate total size
  ansible.builtin.set_fact:
    total_requested_mb: "{{ filesystem_dirs | map(attribute='size_mb') | map('int') | sum }}"
  when: filesystem_dirs | length > 0

# === DEVICE SETUP ===
- name: Set target device
  ansible.builtin.set_fact:
    target_device: >-
      {%- if pv_strategy == 'use_existing_pv' -%}
        {{ existing_pv_device if existing_pv_device != '' else '/dev/' + selected_disk_name }}
      {%- elif partition_strategy == 'create_partition' -%}
        {{ '/dev/' + selected_disk_name + '1' }}
      {%- else -%}
        {{ '/dev/' + selected_disk_name }}
      {%- endif -%}

# === CREATE PARTITION ===
- name: Create partition
  ansible.builtin.shell: |
    wipefs -a "/dev/{{ selected_disk_name }}" 2>/dev/null || true
    parted "/dev/{{ selected_disk_name }}" --script mklabel gpt
    parted "/dev/{{ selected_disk_name }}" --script mkpart primary 0% {{ partition_size_gb }}GB
    sleep 2 && partprobe "/dev/{{ selected_disk_name }}"
  when: 
    - partition_strategy == 'create_partition'
    - pv_strategy == 'create_new_pv'

# === CREATE PV ===
- name: Create PV
  ansible.builtin.shell: pvcreate "{{ target_device }}"
  register: pv_result
  failed_when: pv_result.rc != 0 and 'already' not in pv_result.stderr
  when: 
    - pv_strategy == 'create_new_pv'

# === CREATE VG ===
- name: Create/Extend VG
  ansible.builtin.shell: |
    if vgs "{{ volume_group_name }}" 2>/dev/null; then
      vgextend "{{ volume_group_name }}" "{{ target_device }}"
    else
      vgcreate "{{ volume_group_name }}" "{{ target_device }}"
    fi
  when: vg_strategy in ['create_new', 'extend_existing']

# === SIZE VALIDATION ===
- name: Validate VG size
  ansible.builtin.shell: |
    vg_free=$(vgs --noheadings --units m "{{ volume_group_name }}" -o vg_free | sed 's/[^0-9.]//g' | cut -d. -f1)
    [ "{{ total_requested_mb | default(0) }}" -le "$vg_free" ] || exit 1
  when: filesystem_dirs | length > 0

# === CREATE LV & FILESYSTEM ===
- name: Create LV and filesystem
  ansible.builtin.shell: |
    lvcreate -L "{{ item.size_mb }}M" -n "{{ item.lv_name }}" "{{ volume_group_name }}"
    mkfs.{{ item.fstype }} "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
  loop: "{{ filesystem_dirs }}"
  when: filesystem_dirs | length > 0

# === MOUNT ===
- name: Create mount point and mount
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
  loop: "{{ filesystem_dirs }}"
  when: filesystem_dirs | length > 0

- name: Mount filesystem
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    fstype: "{{ item.fstype }}"
    state: mounted
  loop: "{{ filesystem_dirs }}"
  when: filesystem_dirs | length > 0