# ---
# - name: Install LVM packages
#   ansible.builtin.package:
#     name: lvm2
#     state: present

# - name: Create Physical Volume
#   community.general.lvg:
#     vg: "{{ volume_group_name }}"
#     pvs: "{{ lvm_device }}"
#     state: present

# - name: Create Logical Volumes
#   community.general.lvol:
#     vg: "{{ volume_group_name }}"
#     lv: "{{ item.lv_name | default(item.path | basename) }}"
#     size: "{{ item.size_mb }}m"
#     state: present
#   loop: "{{ filesystem_dirs }}"
#   when: item.create_lvm | default(false)

# - name: Create filesystems
#   community.general.filesystem:
#     fstype: "{{ item.fstype | default('xfs') }}"
#     dev: "/dev/{{ volume_group_name }}/{{ item.lv_name | default(item.path | basename) }}"
#     state: present
#   loop: "{{ filesystem_dirs }}"
#   when: item.create_lvm | default(false)

# - name: Create mount directories
#   ansible.builtin.file:
#     path: "{{ item.path }}"
#     state: directory
#     owner: "{{ item.owner | default('root') }}"
#     group: "{{ item.group | default('root') }}"
#     mode: "{{ item.mode | default('0755') }}"
#   loop: "{{ filesystem_dirs }}"

# - name: Mount filesystems
#   ansible.posix.mount:
#     path: "{{ item.path }}"
#     src: "/dev/{{ volume_group_name }}/{{ item.lv_name | default(item.path | basename) }}"
#     fstype: "{{ item.fstype | default('xfs') }}"
#     opts: "{{ item.mount_opts | default('defaults') }}"
#     state: mounted
#   loop: "{{ filesystem_dirs }}"
#   when: item.create_lvm | default(false)

# - name: Add to /etc/fstab
#   ansible.posix.mount:
#     path: "{{ item.path }}"
#     src: "/dev/{{ volume_group_name }}/{{ item.lv_name | default(item.path | basename) }}"
#     fstype: "{{ item.fstype | default('xfs') }}"
#     opts: "{{ item.mount_opts | default('defaults') }}"
#     state: present
#   loop: "{{ filesystem_dirs }}"
#   when: item.create_lvm | default(false)


---
- name: Parse filesystem_dirs from YAML string
  ansible.builtin.set_fact:
    filesystem_dirs: "{{ filesystem_dirs | from_yaml }}"
  when: 
    - filesystem_dirs is defined
    - filesystem_dirs is string
    - filesystem_dirs != ""
    
- name: Debug - Show variables from survey
  ansible.builtin.debug:
    msg:
      - "filesystem_dirs: {{ filesystem_dirs }}"
      - "lvm_device: {{ lvm_device }}"
      - "volume_group_name: {{ volume_group_name }}"

- name: Install LVM packages
  ansible.builtin.package:
    name: lvm2
    state: present

- name: Create Physical Volume
  community.general.lvg:
    vg: "{{ volume_group_name }}"
    pvs: "{{ lvm_device }}"
    state: present

- name: Create Logical Volumes
  community.general.lvol:
    vg: "{{ volume_group_name }}"
    lv: "{{ item.lv_name | default(item.path | basename) }}"
    size: "{{ item.size_mb }}m"
    state: present
  loop: "{{ filesystem_dirs }}"
  when: item.create_lvm | default(false)

- name: Create filesystems
  community.general.filesystem:
    fstype: "{{ item.fstype | default('xfs') }}"
    dev: "/dev/{{ volume_group_name }}/{{ item.lv_name | default(item.path | basename) }}"
    state: present
  loop: "{{ filesystem_dirs }}"
  when: item.create_lvm | default(false)

- name: Create mount directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
  loop: "{{ filesystem_dirs }}"

- name: Mount filesystems and add to fstab
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/{{ volume_group_name }}/{{ item.lv_name | default(item.path | basename) }}"
    fstype: "{{ item.fstype | default('xfs') }}"
    opts: "{{ item.mount_opts | default('defaults') }}"
    state: mounted
    backup: yes
  loop: "{{ filesystem_dirs }}"
  when: item.create_lvm | default(false)

# Optional: Verify mounts are working
- name: Verify filesystem mounts
  ansible.builtin.stat:
    path: "{{ item.path }}"
  register: mount_check
  loop: "{{ filesystem_dirs }}"
  when: item.create_lvm | default(false)

- name: Display mount status
  ansible.builtin.debug:
    msg: "{{ item.item.path }} is {{ 'mounted' if item.stat.exists else 'not mounted' }}"
  loop: "{{ mount_check.results | default([]) }}"
  when: 
    - mount_check is defined
    - item.item is defined
    - item.item.create_lvm | default(false)