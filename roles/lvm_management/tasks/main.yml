---
- name: Install LVM packages
  ansible.builtin.package:
    name: lvm2
    state: present

# Fixed YAML parsing with proper validation
- name: Debug filesystem_config raw input
  ansible.builtin.debug:
    var: filesystem_config
    verbosity: 1

- name: Validate filesystem_config is not empty
  ansible.builtin.fail:
    msg: "filesystem_config cannot be empty"
  when: 
    - filesystem_config is not defined or filesystem_config == ""

- name: Parse filesystem configuration safely
  ansible.builtin.set_fact:
    filesystem_dirs: "{{ filesystem_config | from_yaml }}"
  rescue:
    - name: Show YAML parsing error
      ansible.builtin.debug:
        msg: |
          ERROR: Failed to parse filesystem_config as YAML
          Raw content: {{ filesystem_config }}
          
    - name: Fail with helpful message
      ansible.builtin.fail:
        msg: |
          filesystem_config contains invalid YAML syntax.
          Please check your YAML format in the survey.
          
          Expected format:
          - path: /data
            lv_name: lv_data
            size_mb: 5000
            fstype: xfs

- name: Validate parsed filesystem configuration
  ansible.builtin.fail:
    msg: "filesystem_dirs must be a non-empty list"
  when: 
    - filesystem_dirs is not defined 
    - filesystem_dirs | length == 0
    - filesystem_dirs is not iterable

- name: Validate each filesystem entry
  ansible.builtin.fail:
    msg: "Missing required field '{{ item.0 }}' in filesystem entry {{ item.1 }}"
  when: item.0 not in item.1
  loop: "{{ ['path', 'lv_name', 'size_mb'] | product(filesystem_dirs) | list }}"

- name: Validate configuration
  ansible.builtin.include_tasks: validate.yml

- name: Set target device
  ansible.builtin.set_fact:
    target_device: >-
      {%- if pv_strategy == 'use_existing_pv' -%}
        {{ existing_pv_device }}
      {%- elif manual_lvm_device != '' -%}
        {{ manual_lvm_device }}
      {%- elif selected_disk_name != '' -%}
        {{ '/dev/' + selected_disk_name }}
      {%- endif -%}

# === PHYSICAL VOLUME ===
- name: Create Physical Volume (if needed)
  ansible.builtin.command: pvcreate {{ target_device }}
  register: pv_result
  failed_when: pv_result.rc != 0 and 'already' not in pv_result.stderr
  changed_when: pv_result.rc == 0 and 'already' not in pv_result.stderr
  when: 
    - pv_strategy == 'create_new_pv'
    - vg_strategy in ['create_new', 'extend_existing']

# === VOLUME GROUP ===
- name: Create/Extend Volume Group
  community.general.lvg:
    vg: "{{ volume_group_name }}"
    pvs: "{{ target_device }}"
    state: present
  when: vg_strategy in ['create_new', 'extend_existing']

# === LOGICAL VOLUMES ===
- name: Create Logical Volumes
  community.general.lvol:
    vg: "{{ volume_group_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.size_mb }}m"
    state: present
  loop: "{{ filesystem_dirs }}"

# === FILESYSTEMS ===
- name: Create filesystems
  community.general.filesystem:
    fstype: "{{ item.fstype | default('xfs') }}"
    dev: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    force: no
  loop: "{{ filesystem_dirs }}"

- name: Create mount directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
  loop: "{{ filesystem_dirs }}"

- name: Mount filesystems
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    fstype: "{{ item.fstype | default('xfs') }}"
    opts: "{{ item.mount_opts | default('defaults') }}"
    state: mounted
  loop: "{{ filesystem_dirs }}"

- name: Display summary
  ansible.builtin.include_tasks: summary.yml