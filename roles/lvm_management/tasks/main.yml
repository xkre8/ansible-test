# ---
# - name: Install LVM packages
#   ansible.builtin.package:
#     name: lvm2
#     state: present

# - name: Parse filesystem configuration
#   ansible.builtin.set_fact:
#     filesystem_dirs: "{{ (filesystem_config | from_yaml) if filesystem_config is defined else [] }}"

# - name: Validate configuration
#   ansible.builtin.include_tasks: validate.yml

# - name: Set target device
#   ansible.builtin.set_fact:
#     target_device: >-
#       {%- if pv_strategy == 'use_existing_pv' -%}
#         {{ existing_pv_device }}
#       {%- elif manual_lvm_device != '' -%}
#         {{ manual_lvm_device }}
#       {%- elif selected_disk_name != '' -%}
#         {{ '/dev/' + selected_disk_name }}
#       {%- endif -%}

# # === PHYSICAL VOLUME ===
# - name: Create Physical Volume (if needed)
#   ansible.builtin.command: pvcreate {{ target_device }}
#   register: pv_result
#   failed_when: pv_result.rc != 0 and 'already' not in pv_result.stderr
#   changed_when: pv_result.rc == 0 and 'already' not in pv_result.stderr
#   when: 
#     - pv_strategy == 'create_new_pv'
#     - vg_strategy in ['create_new', 'extend_existing']

# # === VOLUME GROUP ===
# - name: Create/Extend Volume Group
#   community.general.lvg:
#     vg: "{{ volume_group_name }}"
#     pvs: "{{ target_device }}"
#     state: present
#   when: vg_strategy in ['create_new', 'extend_existing']

# # === LOGICAL VOLUMES ===
# - name: Create Logical Volumes
#   community.general.lvol:
#     vg: "{{ volume_group_name }}"
#     lv: "{{ item.lv_name }}"
#     size: "{{ item.size_mb }}m"
#     state: present
#   loop: "{{ filesystem_dirs }}"

# # === FILESYSTEMS ===
# - name: Create filesystems
#   community.general.filesystem:
#     fstype: "{{ item.fstype | default('xfs') }}"
#     dev: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
#     force: no
#   loop: "{{ filesystem_dirs }}"

# - name: Create mount directories
#   ansible.builtin.file:
#     path: "{{ item.path }}"
#     state: directory
#     owner: "{{ item.owner | default('root') }}"
#     group: "{{ item.group | default('root') }}"
#     mode: "{{ item.mode | default('0755') }}"
#   loop: "{{ filesystem_dirs }}"

# - name: Mount filesystems
#   ansible.posix.mount:
#     path: "{{ item.path }}"
#     src: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
#     fstype: "{{ item.fstype | default('xfs') }}"
#     opts: "{{ item.mount_opts | default('defaults') }}"
#     state: mounted
#   loop: "{{ filesystem_dirs }}"

# - name: Display summary
#   ansible.builtin.include_tasks: summary.yml

---
- name: Install LVM and filesystem packages
  ansible.builtin.package:
    name:
      - lvm2           # for LVM management
      - xfsprogs       # for XFS filesystem
      - e2fsprogs      # for ext2/ext3/ext4 filesystem
    state: present

- name: Parse filesystem configuration
  ansible.builtin.set_fact:
    filesystem_dirs: "{{ (filesystem_config | from_yaml) if filesystem_config is defined else [] }}"

- name: Generate LV names automatically
  ansible.builtin.set_fact:
    filesystem_dirs: "{{ processed_filesystems }}"
  vars:
    processed_filesystems: >-
      {%- set result = [] -%}
      {%- for item in filesystem_dirs -%}
        {%- set auto_lv_name = volume_group_name + '_' + (item.path | regex_replace('^/', '') | regex_replace('/', '_') | regex_replace('-', '_')) -%}
        {%- set final_lv_name = item.lv_name if (item.lv_name is defined and item.lv_name != '') else auto_lv_name -%}
        {%- set processed_item = item | combine({'lv_name': final_lv_name}) -%}
        {%- set _ = result.append(processed_item) -%}
      {%- endfor -%}
      {{ result }}
  when: 
    - auto_generate_lv_names | default(true)
    - filesystem_dirs | length > 0
    
- name: Calculate total requested LV size
  ansible.builtin.set_fact:
    total_requested_mb: "{{ filesystem_dirs | map(attribute='size_mb') | map('int') | sum }}"
  when: filesystem_dirs | length > 0

- name: Validate configuration
  ansible.builtin.include_tasks: validate.yml

- name: Set target device
  ansible.builtin.set_fact:
    target_device: >-
      {%- if pv_strategy == 'use_existing_pv' -%}
        {{ existing_pv_device }}
      {%- elif manual_lvm_device != '' -%}
        {{ manual_lvm_device }}
      {%- elif selected_disk_name != '' -%}
        {{ '/dev/' + selected_disk_name }}
      {%- endif -%}

# === PHYSICAL VOLUME ===
- name: Create Physical Volume (if needed)
  ansible.builtin.command: pvcreate {{ target_device }}
  register: pv_result
  failed_when: pv_result.rc != 0 and 'already' not in pv_result.stderr
  changed_when: pv_result.rc == 0 and 'already' not in pv_result.stderr
  when: 
    - pv_strategy == 'create_new_pv'
    - vg_strategy in ['create_new', 'extend_existing']
    - target_device is defined and target_device != ""

# === VOLUME GROUP ===
- name: Create/Extend Volume Group
  community.general.lvg:
    vg: "{{ volume_group_name }}"
    pvs: "{{ target_device }}"
    state: present
  when: 
    - vg_strategy in ['create_new', 'extend_existing']
    - target_device is defined and target_device != ""

# === CRITICAL: VG SIZE CHECK AND FAIL IF INSUFFICIENT ===
- name: Get Volume Group size and validate
  ansible.builtin.shell: |
    vg_info=$(vgs --noheadings --units m "{{ volume_group_name }}" -o vg_free 2>/dev/null || echo "0")
    vg_free_mb=$(echo "$vg_info" | sed 's/[^0-9.]//g' | cut -d. -f1)
    total_requested={{ total_requested_mb | default(0) }}
    
    if [ "$total_requested" -gt "$vg_free_mb" ]; then
      echo "FAIL: Requested ${total_requested}MB exceeds available ${vg_free_mb}MB"
      exit 1
    else
      echo "PASS: ${vg_free_mb}MB available, ${total_requested}MB requested"
      exit 0
    fi
  register: size_check
  failed_when: size_check.rc != 0
  changed_when: false
  when: filesystem_dirs | length > 0

- name: Display size validation result
  ansible.builtin.debug:
    msg: "{{ size_check.stdout }}"
  when: size_check is defined

# === LOGICAL VOLUMES (Only if validation passed) ===
- name: Create Logical Volumes
  community.general.lvol:
    vg: "{{ volume_group_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.size_mb }}m"
    state: present
  loop: "{{ filesystem_dirs }}"
  when: filesystem_dirs | length > 0

# === FILESYSTEMS ===
- name: Create filesystems
  community.general.filesystem:
    fstype: "{{ item.fstype | default('xfs') }}"
    dev: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    force: no
  loop: "{{ filesystem_dirs }}"
  when: filesystem_dirs | length > 0

- name: Create mount directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
  loop: "{{ filesystem_dirs }}"
  when: filesystem_dirs | length > 0

# === MOUNT WITH PROPER DUMP/PASS VALUES ===
- name: Mount filesystems with correct dump/pass values
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    fstype: "{{ item.fstype | default('xfs') }}"
    opts: "{{ item.mount_opts | default('defaults') }}"
    dump: >-
      {%- if (item.fstype | default('xfs')) == 'xfs' -%}
      0
      {%- elif (item.fstype | default('xfs')) in ['ext4', 'ext3', 'ext2'] -%}
      1
      {%- else -%}
      0
      {%- endif -%}
    passno: >-
      {%- if (item.fstype | default('xfs')) == 'xfs' -%}
      0
      {%- elif (item.fstype | default('xfs')) in ['ext4', 'ext3', 'ext2'] -%}
      2
      {%- else -%}
      0
      {%- endif -%}
    state: mounted
  loop: "{{ filesystem_dirs }}"
  when: filesystem_dirs | length > 0

- name: Display summary
  ansible.builtin.include_tasks: summary.yml

