---
# tasks/main.yml
# Parse survey input
- name: Parse filesystem configuration
  ansible.builtin.set_fact:
    parsed_filesystems: "{{ filesystem_config | from_yaml }}"
  when: filesystem_config is defined

- name: Initialize filesystem_dirs as empty list
  ansible.builtin.set_fact:
    filesystem_dirs: []

- name: Build complete filesystem configuration
  ansible.builtin.set_fact:
    filesystem_dirs: "{{ filesystem_dirs + [item] }}"
  vars:
    item:
      path: "{{ fs.path }}"
      lv_name: "{{ fs.lv_name }}"
      owner: "{{ fs.owner | default('root') }}"
      group: "{{ fs.group | default('root') }}"
      mode: "{{ fs.mode | default('0755') }}"
      create_lvm: "{{ fs.create_lvm | default(true) }}"
      size_mb: "{{ fs.size_mb }}"
      fstype: "{{ fs.fstype | default('xfs') }}"
      mount_opts: "{{ fs.mount_opts | default('defaults') }}"
  loop: "{{ parsed_filesystems }}"
  loop_control:
    loop_var: fs
  when: filesystem_config is defined

# Install required packages
- name: Install LVM packages
  ansible.builtin.package:
    name: lvm2
    state: present



# Disk discovery and validation
- name: Set lvm_device from survey input
  ansible.builtin.set_fact:
    lvm_device: "{{ manual_lvm_device if (manual_lvm_device is defined and manual_lvm_device != '') else '/dev/' + selected_disk_name if (selected_disk_name is defined and selected_disk_name != '') else lvm_device }}"

- name: Get available disks information for validation
  ansible.builtin.command: lsblk -n -o NAME,SIZE,TYPE,MOUNTPOINT,FSTYPE
  register: available_disks_info  
  changed_when: false
  when: lvm_device is defined and lvm_device != ""

- name: Display available disks for reference
  ansible.builtin.debug:
    msg: |
      Available block devices:
      {{ available_disks_info.stdout }}
      
      Selected LVM device: {{ lvm_device }}
  when: available_disks_info is defined

- name: Validate selected disk exists
  ansible.builtin.stat:
    path: "{{ lvm_device }}"
  register: disk_stat
  when: lvm_device is defined and lvm_device != ""

- name: Fail if selected disk does not exist
  ansible.builtin.fail:
    msg: "Selected disk {{ lvm_device }} does not exist. Please check available disks with 'lsblk' command."
  when:
    - lvm_device is defined 
    - lvm_device != ""
    - not disk_stat.stat.exists

- name: Check if disk is already in use
  ansible.builtin.shell: |
    if pvdisplay {{ lvm_device }} 2>/dev/null; then
      echo "pv_exists"
    elif lsblk -n {{ lvm_device }} | grep -q part; then  
      echo "has_partitions"
    elif lsblk -n {{ lvm_device }} | awk '{print $7}' | grep -q '/'; then
      echo "mounted"
    else
      echo "available"
    fi
  register: disk_status
  changed_when: false
  failed_when: false
  when: lvm_device is defined and lvm_device != ""

- name: Display disk status
  ansible.builtin.debug:
    msg: "Disk {{ lvm_device }} status: {{ disk_status.stdout }}"
  when: disk_status is defined

- name: Warning if disk already has PV
  ansible.builtin.debug:
    msg: "WARNING: {{ lvm_device }} already has a Physical Volume. Will proceed to use existing PV."
  when: 
    - disk_status is defined
    - disk_status.stdout == "pv_exists"

# Check if Volume Group already exists
- name: Check if Volume Group exists
  ansible.builtin.command: vgs "{{ volume_group_name }}"
  register: vg_check
  failed_when: false
  changed_when: false
  when: 
    - volume_group_name is defined
    - volume_group_name != ""

- name: Display VG status
  ansible.builtin.debug:
    msg: "{{ 'Volume Group ' + volume_group_name + ' already exists - will use existing VG' if vg_check.rc == 0 else 'Volume Group ' + volume_group_name + ' will be created' }}"
  when: volume_group_name is defined and volume_group_name != ""

# Create Volume Group with Physical Volume (idempotent)
- name: Create or extend Volume Group
  community.general.lvg:
    vg: "{{ volume_group_name }}"
    pvs: "{{ lvm_device }}"
    state: present
  when: 
    - lvm_device is defined 
    - lvm_device != ""
    - volume_group_name is defined
    - volume_group_name != ""

# Create Logical Volumes
- name: Create Logical Volumes
  community.general.lvol:
    vg: "{{ volume_group_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.size_mb }}m"
    state: present
  loop: "{{ filesystem_dirs }}"
  when: 
    - item.create_lvm | default(false)
    - volume_group_name is defined
    - volume_group_name != ""

# Create filesystems
- name: Create filesystems on Logical Volumes
  community.general.filesystem:
    fstype: "{{ item.fstype | default('xfs') }}"
    dev: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    force: no
  loop: "{{ filesystem_dirs }}"
  when: item.create_lvm | default(false)

# Create mount directories
- name: Create mount directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
  loop: "{{ filesystem_dirs }}"

# Mount filesystems
- name: Mount filesystems
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    fstype: "{{ item.fstype | default('xfs') }}"
    opts: "{{ item.mount_opts | default('defaults') }}"
    state: mounted
  loop: "{{ filesystem_dirs }}"
  when: item.create_lvm | default(false)

# Add to fstab for persistent mounting
- name: Add filesystems to /etc/fstab
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    fstype: "{{ item.fstype | default('xfs') }}"
    opts: "{{ item.mount_opts | default('defaults') }}"
    state: present
  loop: "{{ filesystem_dirs }}"
  when: item.create_lvm | default(false)

# Verify mounted filesystems
- name: Display mounted filesystems
  ansible.builtin.debug:
    msg: "{{ item.lv_name }} mounted at {{ item.path }} ({{ item.size_mb }}MB) on disk {{ lvm_device }}"
  loop: "{{ filesystem_dirs }}"
  when: item.create_lvm | default(false)