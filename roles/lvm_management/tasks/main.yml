---
# Enhanced tasks/main.yml with size validation

- name: Install LVM packages
  ansible.builtin.package:
    name: lvm2
    state: present

- name: Parse filesystem configuration
  ansible.builtin.set_fact:
    filesystem_dirs: "{{ (filesystem_config | from_yaml) if filesystem_config is defined else [] }}"

- name: Validate configuration
  ansible.builtin.include_tasks: validate.yml

- name: Set target device
  ansible.builtin.set_fact:
    target_device: >-
      {%- if pv_strategy == 'use_existing_pv' -%}
        {{ existing_pv_device }}
      {%- elif manual_lvm_device != '' -%}
        {{ manual_lvm_device }}
      {%- elif selected_disk_name != '' -%}
        {{ '/dev/' + selected_disk_name }}
      {%- endif -%}

# === PHYSICAL VOLUME ===
- name: Create Physical Volume (if needed)
  ansible.builtin.command: pvcreate {{ target_device }}
  register: pv_result
  failed_when: pv_result.rc != 0 and 'already' not in pv_result.stderr
  changed_when: pv_result.rc == 0 and 'already' not in pv_result.stderr
  when: 
    - pv_strategy == 'create_new_pv'
    - vg_strategy in ['create_new', 'extend_existing']

# === VOLUME GROUP ===
- name: Create/Extend Volume Group
  community.general.lvg:
    vg: "{{ volume_group_name }}"
    pvs: "{{ target_device }}"
    state: present
  when: vg_strategy in ['create_new', 'extend_existing']

# === SIZE VALIDATION ===
- name: Get Volume Group information
  ansible.builtin.command: vgs --noheadings --units m {{ volume_group_name }} -o vg_name,vg_size,vg_free
  register: vg_info
  changed_when: false
  failed_when: vg_info.rc != 0

- name: Parse VG information
  ansible.builtin.set_fact:
    vg_details: "{{ vg_info.stdout.strip().split() }}"

- name: Extract VG size in MB
  ansible.builtin.set_fact:
    vg_total_size_mb: "{{ (vg_details[1] | regex_replace('[^0-9.]', '') | float) | int }}"
    vg_free_size_mb: "{{ (vg_details[2] | regex_replace('[^0-9.]', '') | float) | int }}"

- name: Calculate total requested LV size
  ansible.builtin.set_fact:
    total_requested_size: "{{ filesystem_dirs | map(attribute='size_mb') | map('int') | sum }}"

- name: Debug VG and LV size information
  ansible.builtin.debug:
    msg: |
      üîç SIZE VALIDATION DEBUG:
      =========================
      Volume Group: {{ volume_group_name }}
      VG Total Size: {{ vg_total_size_mb }} MB
      VG Free Size: {{ vg_free_size_mb }} MB
      
      Requested Logical Volumes:
      {% for lv in filesystem_dirs %}
      - {{ lv.lv_name }}: {{ lv.size_mb }} MB
      {% endfor %}
      
      Total Requested Size: {{ total_requested_size }} MB
      Available Space Check: {{ 'PASS' if (total_requested_size | int) <= (vg_free_size_mb | int) else 'FAIL' }}

- name: Validate LV sizes against VG capacity
  ansible.builtin.fail:
    msg: |
      ‚ùå ERROR: Insufficient space in Volume Group!
      
      Volume Group '{{ volume_group_name }}' Details:
      - Total Size: {{ vg_total_size_mb }} MB
      - Available Size: {{ vg_free_size_mb }} MB
      
      Requested Logical Volumes:
      {% for lv in filesystem_dirs %}
      - {{ lv.lv_name }}: {{ lv.size_mb }} MB
      {% endfor %}
      
      Total Requested: {{ total_requested_size }} MB
      Shortage: {{ (total_requested_size | int) - (vg_free_size_mb | int) }} MB
      
      Please reduce the size of logical volumes or use a larger disk/VG.
  when: (total_requested_size | int) > (vg_free_size_mb | int)

# === LOGICAL VOLUMES ===
- name: Create Logical Volumes
  community.general.lvol:
    vg: "{{ volume_group_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.size_mb }}m"
    state: present
  loop: "{{ filesystem_dirs }}"

# === FILESYSTEMS ===
- name: Create filesystems
  community.general.filesystem:
    fstype: "{{ item.fstype | default('xfs') }}"
    dev: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    force: no
  loop: "{{ filesystem_dirs }}"

- name: Create mount directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
  loop: "{{ filesystem_dirs }}"

- name: Mount filesystems
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    fstype: "{{ item.fstype | default('xfs') }}"
    opts: "{{ item.mount_opts | default('defaults') }}"
    state: mounted
  loop: "{{ filesystem_dirs }}"

- name: Display summary
  ansible.builtin.include_tasks: summary.yml
