---
# tasks/main.yml
# Parse survey input
- name: Parse filesystem configuration
  ansible.builtin.set_fact:
    parsed_filesystems: "{{ filesystem_config | from_yaml }}"
  when: filesystem_config is defined

- name: Initialize filesystem_dirs as empty list
  ansible.builtin.set_fact:
    filesystem_dirs: []

- name: Build complete filesystem configuration
  ansible.builtin.set_fact:
    filesystem_dirs: "{{ filesystem_dirs + [item] }}"
  vars:
    item:
      path: "{{ fs.path }}"
      lv_name: "{{ fs.lv_name }}"
      owner: "{{ fs.owner | default('root') }}"
      group: "{{ fs.group | default('root') }}"
      mode: "{{ fs.mode | default('0755') }}"
      create_lvm: "{{ fs.create_lvm | default(true) }}"
      size_mb: "{{ fs.size_mb }}"
      fstype: "{{ fs.fstype | default('xfs') }}"
      mount_opts: "{{ fs.mount_opts | default('defaults') }}"
  loop: "{{ parsed_filesystems }}"
  loop_control:
    loop_var: fs
  when: filesystem_config is defined

# Install required packages
- name: Install LVM packages
  ansible.builtin.package:
    name: lvm2
    state: present

# Auto-discover available disks if lvm_device is not specified
- block:
    - name: Get all block devices information
      ansible.builtin.command: lsblk -J -o NAME,SIZE,TYPE,MOUNTPOINT,FSTYPE
      register: lsblk_output
      changed_when: false

    - name: Parse lsblk output
      ansible.builtin.set_fact:
        block_devices: "{{ (lsblk_output.stdout | from_json).blockdevices }}"

    - name: Filter available disks (not mounted, no filesystem, minimum size)
      ansible.builtin.set_fact:
        available_disks: "{{ available_disks | default([]) + [item] }}"
      loop: "{{ block_devices }}"
      when:
        - item.type == "disk"
        - item.mountpoint is none or item.mountpoint == ""
        - item.fstype is none or item.fstype == ""
        - item.size | regex_replace('[^0-9.]', '') | float >= min_disk_size_gb
        - not item.name in ansible_mounts | map(attribute='device') | map('basename')

    - name: Display available disks
      ansible.builtin.debug:
        msg: "Available disks: {{ available_disks | map(attribute='name') | join(', ') }}"
      when: available_disks is defined and available_disks | length > 0

    - name: Fail if no available disks found
      ansible.builtin.fail:
        msg: "No available disks found that meet the criteria (unpartitioned, unmounted, >= {{ min_disk_size_gb }}GB)"
      when: available_disks is not defined or available_disks | length == 0

    - name: Set lvm_device if auto-discovery is enabled and device not specified
      ansible.builtin.set_fact:
        lvm_device: "/dev/{{ selected_disk_name }}"
      when: 
        - selected_disk_name is defined
        - selected_disk_name != ""

  when: 
    - auto_discover_disks | default(true)
    - (lvm_device is not defined or lvm_device == "")
    - selected_disk_name is defined

# Check if Volume Group already exists
- name: Check if Volume Group exists
  ansible.builtin.command: vgs "{{ volume_group_name }}"
  register: vg_check
  failed_when: false
  changed_when: false
  when: 
    - volume_group_name is defined
    - volume_group_name != ""

- name: Display VG status
  ansible.builtin.debug:
    msg: "{{ 'Volume Group ' + volume_group_name + ' already exists - will use existing VG' if vg_check.rc == 0 else 'Volume Group ' + volume_group_name + ' will be created' }}"
  when: volume_group_name is defined and volume_group_name != ""

# Create Volume Group with Physical Volume (idempotent)
- name: Create or extend Volume Group
  community.general.lvg:
    vg: "{{ volume_group_name }}"
    pvs: "{{ lvm_device }}"
    state: present
  when: 
    - lvm_device is defined 
    - lvm_device != ""
    - volume_group_name is defined
    - volume_group_name != ""

# Create Logical Volumes
- name: Create Logical Volumes
  community.general.lvol:
    vg: "{{ volume_group_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.size_mb }}m"
    state: present
  loop: "{{ filesystem_dirs }}"
  when: 
    - item.create_lvm | default(false)
    - volume_group_name is defined
    - volume_group_name != ""

# Create filesystems
- name: Create filesystems on Logical Volumes
  community.general.filesystem:
    fstype: "{{ item.fstype | default('xfs') }}"
    dev: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    force: no
  loop: "{{ filesystem_dirs }}"
  when: item.create_lvm | default(false)

# Create mount directories
- name: Create mount directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
  loop: "{{ filesystem_dirs }}"

# Mount filesystems
- name: Mount filesystems
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    fstype: "{{ item.fstype | default('xfs') }}"
    opts: "{{ item.mount_opts | default('defaults') }}"
    state: mounted
  loop: "{{ filesystem_dirs }}"
  when: item.create_lvm | default(false)

# Add to fstab for persistent mounting
- name: Add filesystems to /etc/fstab
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/{{ volume_group_name }}/{{ item.lv_name }}"
    fstype: "{{ item.fstype | default('xfs') }}"
    opts: "{{ item.mount_opts | default('defaults') }}"
    state: present
  loop: "{{ filesystem_dirs }}"
  when: item.create_lvm | default(false)

# Verify mounted filesystems
- name: Display mounted filesystems
  ansible.builtin.debug:
    msg: "{{ item.lv_name }} mounted at {{ item.path }} ({{ item.size_mb }}MB) on disk {{ lvm_device }}"
  loop: "{{ filesystem_dirs }}"
  when: item.create_lvm | default(false)
