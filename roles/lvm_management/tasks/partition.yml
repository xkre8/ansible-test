---
# ===============================================
# LVM MANAGEMENT ROLE - PARTITION TASKS (JSON)
# ===============================================

- name: "Get disk information"
  ansible.builtin.shell: |
    echo "=== DISK INFO FOR {{ base_disk }} ==="
    fdisk -l "{{ base_disk }}" 2>/dev/null | head -5 || echo "Disk not found"
    echo ""
    echo "=== CURRENT PARTITIONS ==="
    lsblk "{{ base_disk }}" 2>/dev/null || echo "No partitions"
  register: disk_info
  changed_when: false
  when: 
    - partition_strategy == 'create_partition'
    - base_disk is defined

- name: "Display disk information (JSON)"
  ansible.builtin.debug:
    msg: |
      {
        "disk_analysis": {
          "timestamp": "{{ ansible_date_time.iso8601 }}",
          "target_disk": "{{ base_disk }}",
          "partition_size_requested": "{{ partition_size_gb }}GB",
          "disk_info": {{ disk_info.stdout | default('') | to_nice_json }},
          "status": "{{ 'disk_found' if disk_info.rc == 0 else 'disk_not_found' }}"
        }
      }
  when: 
    - partition_strategy == 'create_partition'
    - disk_info is defined

- name: "Check if partition already exists"
  ansible.builtin.shell: |
    partition_count=$(lsblk "{{ base_disk }}" -o TYPE -n | grep -c "part" || echo "0")
    if [ "$partition_count" = "0" ]; then
      echo "no_partition"
    else
      echo "has_partition"
    fi
  register: existing_partition_check
  changed_when: false
  when: partition_strategy == 'create_partition'

- name: "Debug partition check (JSON)"
  ansible.builtin.debug:
    msg: |
      {
        "partition_check": {
          "result": "{{ existing_partition_check.stdout }}",
          "has_existing_partitions": {{ existing_partition_check.stdout == 'has_partition' }},
          "will_create_partition": {{ (partition_strategy == 'create_partition') and (existing_partition_check.stdout == 'no_partition') }},
          "action": "{{ 'create_new' if existing_partition_check.stdout == 'no_partition' else 'skip_existing' }}"
        }
      }
  when: existing_partition_check is defined

- name: "Create partition using parted"
  ansible.builtin.shell: |
    echo "Creating partition on {{ base_disk }}"
    echo "Partition size: {{ partition_size_gb }}GB"
    
    # Clear and create partition table
    wipefs -a "{{ base_disk }}" 2>/dev/null || true
    parted "{{ base_disk }}" --script mklabel gpt
    parted "{{ base_disk }}" --script mkpart primary 0% {{ partition_size_gb }}GB
    
    # Wait and refresh
    sleep 3
    partprobe "{{ base_disk }}" 2>/dev/null || true
    
    # Verify partition was created
    echo "=== VERIFICATION ==="
    lsblk "{{ base_disk }}"
    
    # Get the new partition name
    new_partition=$(lsblk "{{ base_disk }}" -o NAME -n | grep -v "$(basename {{ base_disk }})" | head -1 | tr -d '├─└│ ')
    if [ -n "$new_partition" ]; then
      echo "SUCCESS: Created partition /dev/${new_partition}"
    else
      echo "ERROR: Failed to create partition!"
      exit 1
    fi
  register: partition_creation
  when: 
    - partition_strategy == 'create_partition'
    - existing_partition_check is defined
    - existing_partition_check.stdout == 'no_partition'

- name: "Get created partition device"
  ansible.builtin.shell: |
    new_partition=$(lsblk "{{ base_disk }}" -o NAME -n | grep -v "$(basename {{ base_disk }})" | head -1 | tr -d '├─└│ ')
    if [ -n "$new_partition" ]; then
      echo "/dev/${new_partition}"
    else
      echo "{{ base_disk }}"
    fi
  register: created_partition
  changed_when: false
  when: partition_strategy == 'create_partition'

- name: "Set partition as target device"
  ansible.builtin.set_fact:
    target_device: "{{ created_partition.stdout if (partition_strategy == 'create_partition' and created_partition is defined and created_partition.stdout is defined) else base_disk }}"
  when: 
    - base_disk is defined
    - base_disk != ""

- name: "Force set target device for create_partition strategy"
  ansible.builtin.set_fact:
    target_device: "/dev/{{ selected_disk_name }}1"
  when: 
    - partition_strategy == 'create_partition'
    - selected_disk_name is defined
    - selected_disk_name != ""

- name: "Display partition operation summary (JSON)"
  ansible.builtin.debug:
    msg: |
      {
        "partition_operation_summary": {
          "timestamp": "{{ ansible_date_time.iso8601 }}",
          "strategy": "{{ partition_strategy }}",
          "configuration": {
            "base_disk": "{{ base_disk | default('undefined') }}",
            "target_device": "{{ target_device | default('undefined') }}",
            "partition_size_gb": {{ partition_size_gb | default(0) }},
            "expected_device": "/dev/{{ selected_disk_name }}1"
          },
          "operation_status": {
            "partition_check_executed": {{ existing_partition_check is defined }},
            "existing_partitions": "{{ existing_partition_check.stdout | default('unknown') }}",
            "partition_creation_executed": {{ partition_creation is defined }},
            "creation_successful": {{ partition_creation is defined and partition_creation.rc == 0 }},
            "device_detection_executed": {{ created_partition is defined }},
            "detected_device": "{{ created_partition.stdout | default('none') }}"
          },
          "validation": {
            "target_device_matches_expected": {{ target_device == '/dev/' + selected_disk_name + '1' if target_device is defined and selected_disk_name is defined else false }},
            "strategy_consistent": {{ partition_strategy == 'create_partition' }}
          },
          "next_steps": [
            "PV creation on {{ target_device | default('TBD') }}",
            "VG creation/extension",
            "LV creation"
          ]
        }
      }
  when: partition_strategy == 'create_partition'

- name: "Display whole disk strategy summary (JSON)"
  ansible.builtin.debug:
    msg: |
      {
        "whole_disk_strategy": {
          "timestamp": "{{ ansible_date_time.iso8601 }}",
          "strategy": "{{ partition_strategy }}",
          "target_device": "{{ base_disk | default('undefined') }}",
          "note": "Skipping partition creation - using whole disk",
          "next_steps": [
            "PV creation on {{ base_disk | default('TBD') }}",
            "VG creation/extension",
            "LV creation"
          ]
        }
      }
  when: partition_strategy == 'use_whole_disk'