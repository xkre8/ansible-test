---
# === PARTITION MANAGEMENT ===
- name: Get disk information
  ansible.builtin.shell: |
    echo "=== DISK INFO FOR {{ base_disk }} ==="
    fdisk -l "{{ base_disk }}" 2>/dev/null | head -5 || echo "Disk not found"
    echo ""
    echo "=== CURRENT PARTITIONS ==="
    lsblk "{{ base_disk }}" 2>/dev/null || echo "No partitions"
  register: disk_info
  changed_when: false
  when: 
    - partition_strategy == 'create_partition'
    - base_disk is defined

- name: Display disk information
  ansible.builtin.debug:
    msg: |
      {{ disk_info.stdout }}
      Will create {{ partition_size_gb }}GB primary partition + remaining space partition on {{ base_disk }}
  when: 
    - partition_strategy == 'create_partition'
    - disk_info is defined
    - disk_info.stdout is defined

- name: Check if partition already exists
  ansible.builtin.shell: |
    partition_count=$(lsblk "{{ base_disk }}" -o TYPE -n | grep -c "part" || echo "0")
    if [ "$partition_count" = "0" ]; then
      echo "no_partition"
    else
      echo "has_partition"
    fi
  register: existing_partition_check
  changed_when: false
  when: partition_strategy == 'create_partition'

- name: Debug partition check
  ansible.builtin.debug:
    msg: |
      Partition check result: {{ existing_partition_check.stdout }}
      Will create dual partitions: {{ (partition_strategy == 'create_partition') and (existing_partition_check.stdout == 'no_partition') }}
      Planned: {{ partition_size_gb }}GB primary + remaining secondary
  when: existing_partition_check is defined

- name: Create partitions using parted (Primary + Remaining)
  ansible.builtin.shell: |
    disk="{{ base_disk }}"
    primary_size="{{ partition_size_gb }}"
    
    echo "=== CREATING DUAL PARTITIONS ==="
    echo "Disk: $disk"
    echo "Primary partition: ${primary_size}GB"
    echo "Secondary partition: remaining space"
    
    # Clear disk and create GPT table
    wipefs -a "$disk" 2>/dev/null || true
    parted "$disk" --script mklabel gpt
    
    # Create primary partition (remove filesystem type specification)
    echo "Creating primary partition: ${primary_size}GB"
    parted "$disk" --script mkpart primary 0% "${primary_size}GB"
    
    # Create secondary partition using remaining space (use -1s for end)
    echo "Creating secondary partition: remaining space"
    parted "$disk" --script mkpart primary "${primary_size}GB" -1s
    
    # Alternative: Use 100% but account for GPT overhead
    # parted "$disk" --script mkpart primary "${primary_size}GB" 100%
    
    # Wait and refresh
    sleep 3
    partprobe "$disk" 2>/dev/null || true
    udevadm settle 2>/dev/null || sleep 2
    
    echo "=== VERIFICATION ==="
    lsblk "$disk"
    echo ""
    parted "$disk" print
    echo ""
    
    # Verify partitions were created
    partition_count=$(lsblk "$disk" -o TYPE -n | grep -c "part" 2>/dev/null || echo "0")
    echo "Partition count: $partition_count"
    
    if [ "$partition_count" -ge "2" ]; then
      primary_info=$(lsblk "$disk" -o NAME,SIZE -n | sed -n '2p' | awk '{print $1 " (" $2 ")"}')
      secondary_info=$(lsblk "$disk" -o NAME,SIZE -n | sed -n '3p' | awk '{print $1 " (" $2 ")"}')
      echo "SUCCESS: Created $partition_count partitions"
      echo "Primary partition: $primary_info"
      echo "Secondary partition: $secondary_info"
    elif [ "$partition_count" = "1" ]; then
      primary_info=$(lsblk "$disk" -o NAME,SIZE -n | sed -n '2p' | awk '{print $1 " (" $2 ")"}')
      echo "WARNING: Only created 1 partition: $primary_info"
      echo "Attempting to create secondary partition..."
      
      # Get actual end of primary partition
      primary_end=$(parted "$disk" unit GB print | grep "^ 1" | awk '{print $3}')
      echo "Primary partition ends at: $primary_end"
      
      # Try creating secondary with remaining space
      parted "$disk" --script mkpart primary "$primary_end" -1s
      partprobe "$disk" 2>/dev/null || true
      sleep 2
      
      # Recheck
      new_count=$(lsblk "$disk" -o TYPE -n | grep -c "part" 2>/dev/null || echo "0")
      if [ "$new_count" = "2" ]; then
        echo "SUCCESS: Secondary partition created"
      else
        echo "ERROR: Failed to create secondary partition"
        exit 1
      fi
    else
      echo "ERROR: Failed to create any partitions!"
      exit 1
    fi
    
    echo "=== FINAL PARTITION TABLE ==="
    lsblk "$disk"
  register: dual_partition_creation
  when: 
    - partition_strategy == 'create_partition'
    - existing_partition_check is defined
    - existing_partition_check.stdout == 'no_partition'

- name: Get created partition devices
  ansible.builtin.shell: |
    disk="{{ base_disk }}"
    
    # Wait for devices to appear
    sleep 2
    
    # Get partition list (exclude disk name)
    partitions=$(lsblk "$disk" -o NAME -n | grep -v "$(basename $disk)" | tr -d '├─└│ ')
    
    if [ -n "$partitions" ]; then
      primary_partition=$(echo "$partitions" | sed -n '1p')
      secondary_partition=$(echo "$partitions" | sed -n '2p')
      
      # Verify devices exist
      if [ -b "/dev/${primary_partition}" ]; then
        echo "PRIMARY:/dev/${primary_partition}"
      else
        echo "PRIMARY:{{ base_disk }}"
      fi
      
      if [ -n "$secondary_partition" ] && [ -b "/dev/${secondary_partition}" ]; then
        echo "SECONDARY:/dev/${secondary_partition}"
      else
        echo "SECONDARY:"
      fi
    else
      echo "PRIMARY:{{ base_disk }}"
      echo "SECONDARY:"
    fi
  register: created_partitions
  changed_when: false
  when: partition_strategy == 'create_partition'

- name: Set partition devices as facts
  ansible.builtin.set_fact:
    primary_partition_device: "{{ (created_partitions.stdout_lines | select('match', '^PRIMARY:') | first).split(':')[1] if created_partitions is defined else base_disk }}"
    secondary_partition_device: "{{ (created_partitions.stdout_lines | select('match', '^SECONDARY:') | first).split(':')[1] if created_partitions is defined and (created_partitions.stdout_lines | select('match', '^SECONDARY:') | first).split(':')[1] != '' else '' }}"
  when: 
    - partition_strategy == 'create_partition'
    - base_disk is defined

- name: Set target device for LVM (use primary partition)
  ansible.builtin.set_fact:
    target_device: "{{ primary_partition_device }}"
    secondary_partition: "{{ secondary_partition_device }}"
  when: 
    - partition_strategy == 'create_partition'
    - primary_partition_device is defined

- name: Verify partition creation results
  ansible.builtin.debug:
    msg: |
      PARTITION CREATION RESULTS:
      - Strategy: {{ partition_strategy }}
      - Base disk: {{ base_disk }}
      - Primary partition (for LVM): {{ primary_partition_device | default('undefined') }}
      - Secondary partition (available): {{ secondary_partition_device | default('none') }}
      - Target device set to: {{ target_device | default('undefined') }}
      
      VERIFICATION:
      - Primary partition exists: {{ primary_partition_device != base_disk if primary_partition_device is defined else false }}
      - Secondary partition created: {{ secondary_partition_device != '' if secondary_partition_device is defined else false }}
      - Ready for PV creation: {{ target_device is defined and target_device != '' }}

- name: Display final partition summary
  ansible.builtin.debug:
    msg: |
      FINAL PARTITION SUMMARY:
      
      {% if partition_strategy == 'create_partition' %}
      === DUAL PARTITION STRATEGY ===
      Target disk: {{ base_disk | default('undefined') }}
      Requested size: {{ partition_size_gb }}GB
      
      {% if existing_partition_check is defined %}
      Pre-check: {{ existing_partition_check.stdout }}
      {% endif %}
      
      {% if dual_partition_creation is defined %}
      {% if dual_partition_creation.rc is defined and dual_partition_creation.rc == 0 %}
      Creation: SUCCESS
      {% elif dual_partition_creation.skipped is defined %}
      Creation: SKIPPED ({{ dual_partition_creation.skip_reason | default('existing partitions') }})
      {% else %}
      Creation: FAILED
      {% endif %}
      {% endif %}
      
      RESULTS:
      - Primary partition: {{ primary_partition_device | default('not created') }}
      - Secondary partition: {{ secondary_partition_device | default('not created') }}
      - LVM target device: {{ target_device | default('not set') }}
      
      {% if dual_partition_creation is defined and dual_partition_creation.stdout is defined %}
      CREATION OUTPUT:
      {{ dual_partition_creation.stdout }}
      {% endif %}
      
      {% else %}
      === WHOLE DISK STRATEGY ===
      Using entire disk: {{ base_disk | default('undefined') }}
      No partitioning required.
      {% endif %}