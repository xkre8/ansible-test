---
# === PARTITION MANAGEMENT ===
- name: Get disk information
  ansible.builtin.shell: |
    echo "=== DISK INFO FOR {{ base_disk }} ==="
    fdisk -l "{{ base_disk }}" 2>/dev/null | head -5 || echo "Disk not found"
    echo ""
    echo "=== CURRENT PARTITIONS ==="
    lsblk "{{ base_disk }}" 2>/dev/null || echo "No partitions"
  register: disk_info
  changed_when: false
  when: 
    - partition_strategy == 'create_partition'
    - base_disk is defined

- name: Display disk information
  ansible.builtin.debug:
    msg: |
      {{ disk_info.stdout }}
      Will create {{ partition_size_gb }}GB primary partition + remaining space partition on {{ base_disk }}
  when: 
    - partition_strategy == 'create_partition'
    - disk_info is defined
    - disk_info.stdout is defined

- name: Check if partition already exists
  ansible.builtin.shell: |
    partition_count=$(lsblk "{{ base_disk }}" -o TYPE -n | grep -c "part" || echo "0")
    if [ "$partition_count" = "0" ]; then
      echo "no_partition"
    else
      echo "has_partition"
    fi
  register: existing_partition_check
  changed_when: false
  when: partition_strategy == 'create_partition'

- name: Debug partition check
  ansible.builtin.debug:
    msg: |
      Partition check result: {{ existing_partition_check.stdout }}
      Will create dual partitions: {{ (partition_strategy == 'create_partition') and (existing_partition_check.stdout == 'no_partition') }}
      Planned: {{ partition_size_gb }}GB primary + remaining secondary
  when: existing_partition_check is defined

- name: Create dual partitions (Primary + Secondary)
  ansible.builtin.shell: |
    disk="{{ base_disk }}"
    primary_size="{{ partition_size_gb }}"
    
    echo "=== CREATING DUAL PARTITIONS ==="
    echo "Disk: $disk"
    echo "Primary partition: ${primary_size}GB"
    echo "Secondary partition: remaining space"
    
    # Clear disk and create GPT table
    wipefs -a "$disk" 2>/dev/null || true
    parted "$disk" --script mklabel gpt
    
    # Create primary partition
    echo "Creating primary partition: ${primary_size}GB"
    parted "$disk" --script mkpart primary 0% "${primary_size}GB"
    
    # Create secondary partition using remaining space
    echo "Creating secondary partition: remaining space"
    parted "$disk" --script mkpart primary "${primary_size}GB" 100%
    
    # Wait and refresh
    sleep 3
    partprobe "$disk" 2>/dev/null || true
    udevadm settle 2>/dev/null || sleep 2
    
    echo "=== INITIAL VERIFICATION ==="
    lsblk "$disk"
    echo ""
    
    # Check partition count
    partition_count=$(lsblk "$disk" -o TYPE -n | grep -c "part" 2>/dev/null || echo "0")
    echo "Partition count after creation: $partition_count"
    
    if [ "$partition_count" = "2" ]; then
      primary_info=$(lsblk "$disk" -o NAME,SIZE -n | sed -n '2p' | awk '{print $1 " (" $2 ")"}')
      secondary_info=$(lsblk "$disk" -o NAME,SIZE -n | sed -n '3p' | awk '{print $1 " (" $2 ")"}')
      echo "SUCCESS: Created 2 partitions"
      echo "Primary partition: $primary_info"
      echo "Secondary partition: $secondary_info"
      
    elif [ "$partition_count" = "1" ]; then
      primary_info=$(lsblk "$disk" -o NAME,SIZE -n | sed -n '2p' | awk '{print $1 " (" $2 ")"}')
      echo "WARNING: Only 1 partition created: $primary_info"
      echo "Attempting to create secondary partition..."
      
      # Get primary partition end in sectors
      primary_end=$(parted "$disk" unit s print | grep "^ 1" | awk '{print $3}' | sed 's/s//')
      total_sectors=$(parted "$disk" unit s print | grep "^Disk" | awk '{print $3}' | sed 's/s//')
      
      if [ -n "$primary_end" ] && [ -n "$total_sectors" ]; then
        secondary_start=$((primary_end + 1))
        secondary_end=$((total_sectors - 34))  # Reserve 34 sectors for GPT
        
        echo "Primary ends at sector: $primary_end"
        echo "Creating secondary: ${secondary_start}s to ${secondary_end}s"
        
        parted "$disk" --script mkpart primary "${secondary_start}s" "${secondary_end}s"
        sleep 2
        partprobe "$disk" 2>/dev/null || true
        udevadm settle 2>/dev/null || sleep 2
        
        # Recheck
        new_count=$(lsblk "$disk" -o TYPE -n | grep -c "part" 2>/dev/null || echo "0")
        if [ "$new_count" = "2" ]; then
          echo "SUCCESS: Secondary partition created"
        else
          echo "ERROR: Failed to create secondary partition"
          echo "Trying alternative method..."
          
          # Alternative: Use percentage
          parted "$disk" --script mkpart primary "${primary_size}GB" 100%
          sleep 2
          partprobe "$disk" 2>/dev/null || true
          
          final_count=$(lsblk "$disk" -o TYPE -n | grep -c "part" 2>/dev/null || echo "0")
          if [ "$final_count" = "2" ]; then
            echo "SUCCESS: Secondary partition created (alternative method)"
          else
            echo "ERROR: All methods failed to create secondary partition"
          fi
        fi
      else
        echo "ERROR: Could not determine partition boundaries"
      fi
      
    else
      echo "ERROR: No partitions were created!"
      echo "Disk may be in use or have issues"
      lsblk "$disk"
      exit 1
    fi
    
    echo "=== FINAL VERIFICATION ==="
    lsblk "$disk"
    echo ""
    parted "$disk" print
    
    # Final partition count
    final_partition_count=$(lsblk "$disk" -o TYPE -n | grep -c "part" 2>/dev/null || echo "0")
    echo "Final partition count: $final_partition_count"
    
    if [ "$final_partition_count" -ge "2" ]; then
      echo "RESULT: SUCCESS - Dual partition layout created"
    elif [ "$final_partition_count" = "1" ]; then
      echo "RESULT: PARTIAL - Only primary partition created"
    else
      echo "RESULT: FAILED - No partitions created"
      exit 1
    fi
  register: partition_creation_result
  when: 
    - partition_strategy == 'create_partition'
    - existing_partition_check is defined
    - existing_partition_check.stdout == 'no_partition'

- name: Ensure both partitions exist
  ansible.builtin.shell: |
    disk="{{ base_disk }}"
    
    echo "=== PARTITION EXISTENCE CHECK ==="
    
    # Wait for device files
    sleep 3
    
    # Check current partition count
    current_count=$(lsblk "$disk" -o TYPE -n | grep -c "part" 2>/dev/null || echo "0")
    echo "Current partition count: $current_count"
    
    # List current partitions
    if [ "$current_count" -gt "0" ]; then
      echo "Existing partitions:"
      lsblk "$disk" -o NAME,SIZE,TYPE
    fi
    
    # Check specific device files
    primary_exists="no"
    secondary_exists="no"
    
    if [ -b "${disk}1" ]; then
      primary_exists="yes"
      echo "Primary partition ${disk}1: EXISTS"
    else
      echo "Primary partition ${disk}1: MISSING"
    fi
    
    if [ -b "${disk}2" ]; then
      secondary_exists="yes"  
      echo "Secondary partition ${disk}2: EXISTS"
    else
      echo "Secondary partition ${disk}2: MISSING"
    fi
    
    echo "PRIMARY_EXISTS:$primary_exists"
    echo "SECONDARY_EXISTS:$secondary_exists"
    echo "PARTITION_COUNT:$current_count"
    
    # Get partition information for later use
    if [ "$current_count" -gt "0" ]; then
      partitions=$(lsblk "$disk" -o NAME -n | grep -v "$(basename $disk)" | tr -d '├─└│ ')
      primary_partition=$(echo "$partitions" | sed -n '1p')
      secondary_partition=$(echo "$partitions" | sed -n '2p')
      
      if [ -n "$primary_partition" ]; then
        echo "PRIMARY_DEVICE:/dev/$primary_partition"
      fi
      
      if [ -n "$secondary_partition" ]; then
        echo "SECONDARY_DEVICE:/dev/$secondary_partition"
      fi
    fi
  register: partition_check_result
  changed_when: false
  when: partition_strategy == 'create_partition'

- name: Set partition device facts
  ansible.builtin.set_fact:
    primary_partition_device: "{{ (partition_check_result.stdout_lines | select('match', '^PRIMARY_DEVICE:') | first).split(':')[1] if partition_check_result is defined and (partition_check_result.stdout_lines | select('match', '^PRIMARY_DEVICE:') | list | length > 0) else base_disk + '1' }}"
    secondary_partition_device: "{{ (partition_check_result.stdout_lines | select('match', '^SECONDARY_DEVICE:') | first).split(':')[1] if partition_check_result is defined and (partition_check_result.stdout_lines | select('match', '^SECONDARY_DEVICE:') | list | length > 0) else base_disk + '2' }}"
    partition_count: "{{ (partition_check_result.stdout_lines | select('match', '^PARTITION_COUNT:') | first).split(':')[1] | int if partition_check_result is defined else 0 }}"
  when: 
    - partition_strategy == 'create_partition'
    - base_disk is defined

- name: Set target device for LVM (primary partition)
  ansible.builtin.set_fact:
    target_device: "{{ primary_partition_device }}"
    secondary_partition: "{{ secondary_partition_device }}"
  when: 
    - partition_strategy == 'create_partition'
    - primary_partition_device is defined

- name: Display partition creation summary
  ansible.builtin.debug:
    msg: |
      ============================================
      PARTITION CREATION SUMMARY
      ============================================
      
      Strategy: {{ partition_strategy }}
      Base disk: {{ base_disk | default('undefined') }}
      Requested primary size: {{ partition_size_gb }}GB
      
      {% if existing_partition_check is defined %}
      Pre-check result: {{ existing_partition_check.stdout }}
      {% endif %}
      
      {% if partition_creation_result is defined %}
      Creation executed: Yes
      {% if partition_creation_result.rc == 0 %}
      Creation status: SUCCESS
      {% else %}
      Creation status: FAILED (rc={{ partition_creation_result.rc }})
      {% endif %}
      {% else %}
      Creation executed: No (skipped due to existing partitions)
      {% endif %}
      
      FINAL RESULTS:
      - Primary partition: {{ primary_partition_device | default('not determined') }}
      - Secondary partition: {{ secondary_partition_device | default('not determined') }}
      - Partition count: {{ partition_count | default(0) }}
      - LVM target device: {{ target_device | default('not set') }}
      
      VERIFICATION STATUS:
      - Primary exists: {{ primary_partition_device != (base_disk + '1') if primary_partition_device is defined else 'unknown' }}
      - Secondary exists: {{ secondary_partition_device != (base_disk + '2') if secondary_partition_device is defined else 'unknown' }}
      - Ready for LVM: {{ target_device is defined and target_device != '' }}
      
      {% if partition_creation_result is defined and partition_creation_result.stdout is defined %}
      ============================================
      DETAILED OUTPUT:
      {{ partition_creation_result.stdout }}
      {% endif %}
      
      ============================================
  when: partition_strategy == 'create_partition'

- name: Display whole disk strategy summary
  ansible.builtin.debug:
    msg: |
      ============================================
      WHOLE DISK STRATEGY
      ============================================
      Using entire disk: {{ base_disk | default('undefined') }}
      Target device: {{ base_disk | default('undefined') }}
      No partitioning required.
      ============================================
  when: partition_strategy == 'use_whole_disk'