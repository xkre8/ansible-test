---
# === PARTITION MANAGEMENT ===
- name: Get disk information
  ansible.builtin.shell: |
    echo "=== DISK INFO FOR {{ base_disk }} ==="
    fdisk -l "{{ base_disk }}" 2>/dev/null | head -5 || echo "Disk not found"
    echo ""
    echo "=== CURRENT PARTITIONS ==="
    lsblk "{{ base_disk }}" 2>/dev/null || echo "No partitions"
  register: disk_info
  changed_when: false
  when: 
    - partition_strategy == 'create_partition'
    - base_disk is defined

- name: Display disk information
  ansible.builtin.debug:
    msg: |
      {{ disk_info.stdout }}
      Will create {{ partition_size_gb }}GB primary partition + remaining space partition on {{ base_disk }}
  when: 
    - partition_strategy == 'create_partition'
    - disk_info is defined
    - disk_info.stdout is defined

- name: Check if partition already exists
  ansible.builtin.shell: |
    partition_count=$(lsblk "{{ base_disk }}" -o TYPE -n | grep -c "part" || echo "0")
    if [ "$partition_count" = "0" ]; then
      echo "no_partition"
    else
      echo "has_partition"
    fi
  register: existing_partition_check
  changed_when: false
  when: partition_strategy == 'create_partition'

- name: Debug partition check
  ansible.builtin.debug:
    msg: |
      Partition check result: {{ existing_partition_check.stdout }}
      Will create dual partitions: {{ (partition_strategy == 'create_partition') and (existing_partition_check.stdout == 'no_partition') }}
      Planned: {{ partition_size_gb }}GB primary + remaining secondary
  when: existing_partition_check is defined

- name: Create partitions using parted (Primary + Remaining) - FIXED
  ansible.builtin.shell: |
    disk="{{ base_disk }}"
    primary_size="{{ partition_size_gb }}"
    
    echo "=== CREATING DUAL PARTITIONS ==="
    echo "Disk: $disk"
    echo "Primary partition: ${primary_size}GB"
    echo "Secondary partition: remaining space"
    
    # Clear disk and create GPT table
    wipefs -a "$disk" 2>/dev/null || true
    parted "$disk" --script mklabel gpt
    
    # Get disk size in GB for calculation
    disk_size_gb=$(lsblk "$disk" -b -n -o SIZE | awk '{print int($1/1024/1024/1024)}')
    remaining_start_gb=$((primary_size))
    
    echo "Disk size: ${disk_size_gb}GB"
    echo "Primary partition: 0GB to ${primary_size}GB"
    echo "Secondary partition: ${remaining_start_gb}GB to ${disk_size_gb}GB"
    
    # Create primary partition with exact size
    echo "Creating primary partition: ${primary_size}GB"
    parted "$disk" --script mkpart primary ext4 0GB "${primary_size}GB"
    
    # Create secondary partition (remaining space)  
    echo "Creating secondary partition: remaining space"
    parted "$disk" --script mkpart primary ext4 "${primary_size}GB" "100%"
    
    # Alternative approach - use sectors instead of GB
    # parted "$disk" --script mkpart primary 2048s "$((primary_size * 1024 * 1024 * 2))s"
    # parted "$disk" --script mkpart primary "$((primary_size * 1024 * 1024 * 2 + 1))s" 100%
    
    # Wait and refresh
    sleep 3
    partprobe "$disk" 2>/dev/null || true
    
    echo "=== VERIFICATION ==="
    lsblk "$disk"
    parted "$disk" print
    
    # Verify partitions were created
    partition_count=$(lsblk "$disk" -o TYPE -n | grep -c "part" || echo "0")
    if [ "$partition_count" -ge "2" ]; then
      echo "SUCCESS: Created $partition_count partitions"
      echo "Primary partition: $(lsblk "$disk" -o NAME,SIZE -n | sed -n '2p')"
      echo "Secondary partition: $(lsblk "$disk" -o NAME,SIZE -n | sed -n '3p')"
    else
      echo "ERROR: Failed to create both partitions! Only $partition_count found"
      exit 1
    fi
  register: dual_partition_creation
  when: 
    - partition_strategy == 'create_partition'
    - existing_partition_check is defined
    - existing_partition_check.stdout == 'no_partition'

- name: Get created partition devices
  ansible.builtin.shell: |
    disk="{{ base_disk }}"
    
    # Get partition list (exclude disk name)
    partitions=$(lsblk "$disk" -o NAME -n | grep -v "$(basename $disk)" | tr -d '├─└│ ')
    
    if [ -n "$partitions" ]; then
      primary_partition=$(echo "$partitions" | sed -n '1p')
      secondary_partition=$(echo "$partitions" | sed -n '2p')
      
      echo "PRIMARY:/dev/${primary_partition}"
      echo "SECONDARY:/dev/${secondary_partition}"
    else
      echo "PRIMARY:{{ base_disk }}"
      echo "SECONDARY:"
    fi
  register: created_partitions
  changed_when: false
  when: partition_strategy == 'create_partition'

- name: Set primary partition as target device
  ansible.builtin.set_fact:
    target_device: "{{ (created_partitions.stdout_lines | select('match', '^PRIMARY:') | first).split(':')[1] if created_partitions is defined else base_disk }}"
    secondary_partition: "{{ (created_partitions.stdout_lines | select('match', '^SECONDARY:') | first).split(':')[1] if created_partitions is defined and (created_partitions.stdout_lines | select('match', '^SECONDARY:') | first).split(':')[1] != '' else '' }}"
  when: 
    - partition_strategy == 'create_partition'
    - base_disk is defined

- name: Force set target device for create_partition strategy
  ansible.builtin.set_fact:
    target_device: "/dev/{{ selected_disk_name }}1"
    secondary_partition: "/dev/{{ selected_disk_name }}2"
  when: 
    - partition_strategy == 'create_partition'
    - selected_disk_name is defined
    - selected_disk_name != ""

- name: Verify target device is set correctly
  ansible.builtin.debug:
    msg: |
      DUAL PARTITION RESULT:
      - Strategy: {{ partition_strategy }}
      - Base disk: {{ base_disk }}
      - Primary partition (LVM): {{ target_device }}
      - Secondary partition (Available): {{ secondary_partition }}
      - Expected primary: /dev/{{ selected_disk_name }}1
      - Expected secondary: /dev/{{ selected_disk_name }}2
      - Primary match: {{ target_device == '/dev/' + selected_disk_name + '1' }}

- name: Display partition result
  ansible.builtin.debug:
    msg: |
      Partition Strategy: {{ partition_strategy }}
      Base disk: {{ base_disk | default('undefined') }}
      
      {% if partition_strategy == 'create_partition' %}
      === DUAL PARTITION CREATION ===
      Primary partition: {{ target_device | default('undefined') }} ({{ partition_size_gb }}GB)
      Secondary partition: {{ secondary_partition | default('not created') }} (remaining space)
      
      {% if existing_partition_check is defined %}
      Partition check: {{ existing_partition_check.stdout }}
      {% endif %}
      
      {% if dual_partition_creation is defined and dual_partition_creation.stdout is defined %}
      Partition creation output:
      {{ dual_partition_creation.stdout }}
      {% elif dual_partition_creation is defined and dual_partition_creation.skipped is defined %}
      Partition creation: SKIPPED ({{ dual_partition_creation.skip_reason | default('condition not met') }})
      {% else %}
      Partition creation: NOT EXECUTED (existing partitions found or condition not met)
      {% endif %}
      
      {% if created_partitions is defined and created_partitions.stdout is defined %}
      Detected partitions:
      {{ created_partitions.stdout }}
      {% else %}
      Partition detection: FAILED - using fallback
      {% endif %}
      
      STATUS:
      - Primary partition ready for PV: {{ target_device is defined and target_device != '' }}
      - Secondary partition available: {{ secondary_partition != '' }}
      - Both partitions created: {{ target_device is defined and secondary_partition != '' }}
      
      {% else %}
      Strategy: Using whole disk (no partition creation)
      Target device: {{ base_disk | default('undefined') }}
      {% endif %}