---
# Enhanced tasks/validate.yml

# Basic validation only
- name: Check required variables
  ansible.builtin.fail:
    msg: "Missing required variable: {{ item }}"
  when: vars[item] is not defined or vars[item] == ""
  loop:
    - volume_group_name

- name: Check device is specified when needed
  ansible.builtin.fail:
    msg: |
      Device required for {{ vg_strategy }} strategy!
      Specify: selected_disk_name, manual_lvm_device, or existing_pv_device
  when:
    - vg_strategy in ['create_new', 'extend_existing']
    - selected_disk_name == ""
    - manual_lvm_device == ""
    - existing_pv_device == "" or pv_strategy != 'use_existing_pv'

- name: Set target device for validation
  ansible.builtin.set_fact:
    target_device: >-
      {%- if pv_strategy == 'use_existing_pv' -%}
        {{ existing_pv_device }}
      {%- elif manual_lvm_device != '' -%}
        {{ manual_lvm_device }}
      {%- elif selected_disk_name != '' -%}
        {{ '/dev/' + selected_disk_name }}
      {%- endif -%}
  when: 
    - vg_strategy in ['create_new', 'extend_existing']

- name: Validate device exists
  ansible.builtin.stat:
    path: "{{ target_device }}"
  register: device_check
  failed_when: not device_check.stat.exists
  when: 
    - target_device is defined
    - target_device != ""
    - vg_strategy in ['create_new', 'extend_existing']

- name: Check VG exists for use_existing strategy
  ansible.builtin.command: vgs --noheadings "{{ volume_group_name }}"
  register: vg_check
  failed_when: vg_check.rc != 0
  changed_when: false
  when: vg_strategy == 'use_existing'

- name: Check VG doesn't exist for create_new strategy
  ansible.builtin.command: vgs --noheadings "{{ volume_group_name }}"
  register: vg_exists
  failed_when: vg_exists.rc == 0
  changed_when: false
  when: vg_strategy == 'create_new'

- name: Validate filesystem configuration syntax
  ansible.builtin.set_fact:
    filesystem_dirs_test: "{{ (filesystem_config | from_yaml) if filesystem_config is defined else [] }}"
  failed_when: false
  register: yaml_test

- name: Check filesystem configuration is valid YAML
  ansible.builtin.fail:
    msg: |
      Invalid YAML in filesystem_config:
      {{ ansible_failed_result.msg | default('YAML parsing failed') }}
  when: yaml_test is failed

- name: Validate required fields in filesystem config
  ansible.builtin.fail:
    msg: "Missing required field '{{ item.1 }}' in filesystem entry {{ item.0 + 1 }}"
  when: item.1 not in vars.filesystem_dirs[item.0]
  with_indexed:
    - "{{ filesystem_dirs }}"
  loop_control:
    loop_var: item
  vars:
    required_fields:
      - path
      - lv_name
      - size_mb