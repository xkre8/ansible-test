---
# Basic validation only
- name: Check required variables
  ansible.builtin.fail:
    msg: "Missing required variable: {{ item }}"
  when: vars[item] is not defined or vars[item] == ""
  loop:
    - volume_group_name

- name: Check device is specified when needed
  ansible.builtin.fail:
    msg: |
      Device required for {{ vg_strategy }} strategy!
      Specify: selected_disk_name, manual_lvm_device, or existing_pv_device
  when:
    - vg_strategy in ['create_new', 'extend_existing']
    - selected_disk_name == ""
    - manual_lvm_device == ""
    - existing_pv_device == "" or pv_strategy != 'use_existing_pv'

- name: Validate device exists
  ansible.builtin.stat:
    path: "{{ target_device }}"
  register: device_check
  failed_when: not device_check.stat.exists
  when: 
    - target_device is defined
    - target_device != ""
    - vg_strategy in ['create_new', 'extend_existing']

- name: Check VG exists for use_existing strategy
  ansible.builtin.command: vgs --noheadings "{{ volume_group_name }}"
  register: vg_check
  failed_when: vg_check.rc != 0
  changed_when: false
  when: vg_strategy == 'use_existing'

- name: Check VG doesn't exist for create_new strategy
  ansible.builtin.command: vgs --noheadings "{{ volume_group_name }}"
  register: vg_exists
  failed_when: vg_exists.rc == 0
  changed_when: false
  when: vg_strategy == 'create_new'

# Validate filesystem configuration format
- name: Validate filesystem configuration is parseable
  ansible.builtin.set_fact:
    test_parse: "{{ filesystem_config | from_yaml }}"
  when: filesystem_config is defined and filesystem_config != ""

- name: Validate LV names are unique
  ansible.builtin.fail:
    msg: "Duplicate logical volume name found: {{ item.lv_name }}"
  when: filesystem_dirs | selectattr('lv_name', 'equalto', item.lv_name) | list | length > 1
  loop: "{{ filesystem_dirs }}"
  loop_control:
    label: "{{ item.lv_name }}"

- name: Validate LV sizes are positive integers
  ansible.builtin.fail:
    msg: "Invalid size for LV {{ item.lv_name }}: {{ item.size_mb }}. Must be a positive integer."
  when: 
    - item.size_mb is not number or item.size_mb | int <= 0
  loop: "{{ filesystem_dirs }}"
  loop_control:
    label: "{{ item.lv_name }}: {{ item.size_mb }}"