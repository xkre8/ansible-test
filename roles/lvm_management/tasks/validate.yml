# ---
# # Basic validation only
# - name: Check required variables
#   ansible.builtin.fail:
#     msg: "Missing required variable: {{ item }}"
#   when: vars[item] is not defined or vars[item] == ""
#   loop:
#     - volume_group_name

# - name: Check device is specified when needed
#   ansible.builtin.fail:
#     msg: |
#       Device required for {{ vg_strategy }} strategy!
#       Specify: selected_disk_name, manual_lvm_device, or existing_pv_device
#   when:
#     - vg_strategy in ['create_new', 'extend_existing']
#     - selected_disk_name == ""
#     - manual_lvm_device == ""
#     - existing_pv_device == "" or pv_strategy != 'use_existing_pv'

# - name: Validate device exists
#   ansible.builtin.stat:
#     path: "{{ target_device }}"
#   register: device_check
#   failed_when: not device_check.stat.exists
#   when: 
#     - target_device is defined
#     - target_device != ""
#     - vg_strategy in ['create_new', 'extend_existing']

# - name: Check VG exists for use_existing strategy
#   ansible.builtin.command: vgs --noheadings "{{ volume_group_name }}"
#   register: vg_check
#   failed_when: vg_check.rc != 0
#   changed_when: false
#   when: vg_strategy == 'use_existing'

# - name: Check VG doesn't exist for create_new strategy
#   ansible.builtin.command: vgs --noheadings "{{ volume_group_name }}"
#   register: vg_exists
#   failed_when: vg_exists.rc == 0
#   changed_when: false
#   when: vg_strategy == 'create_new'

---
- name: Check required variables
  ansible.builtin.fail:
    msg: "Missing required variable: {{ item }}"
  when: vars[item] is not defined or vars[item] == ""
  loop:
    - volume_group_name

- name: Validate partition strategy
  ansible.builtin.fail:
    msg: "partition_strategy must be 'use_whole_disk' or 'create_partition'"
  when: partition_strategy not in ['use_whole_disk', 'create_partition']

- name: Validate partition size
  ansible.builtin.fail:
    msg: "partition_size_gb must be between 1 and 1000 GB"
  when: 
    - partition_strategy == 'create_partition'
    - (partition_size_gb | int) < 1 or (partition_size_gb | int) > 1000

- name: Check device is specified when needed
  ansible.builtin.fail:
    msg: "Device required! Specify: selected_disk_name, manual_lvm_device, or existing_pv_device"
  when:
    - vg_strategy in ['create_new', 'extend_existing']
    - selected_disk_name == ""
    - manual_lvm_device == ""
    - (existing_pv_device == "" or pv_strategy != 'use_existing_pv')

- name: Validate base disk exists
  ansible.builtin.stat:
    path: "{{ base_disk }}"
  register: device_check
  failed_when: not device_check.stat.exists
  when: 
    - base_disk is defined and base_disk != ""
    - vg_strategy in ['create_new', 'extend_existing']

- name: Check VG exists for use_existing strategy
  ansible.builtin.command: vgs --noheadings "{{ volume_group_name }}"
  register: vg_check
  failed_when: vg_check.rc != 0
  changed_when: false
  when: vg_strategy == 'use_existing'

- name: Validate filesystem configuration
  ansible.builtin.fail:
    msg: |
      Invalid filesystem config! Check:
      - path, lv_name, size_mb are required
      - size_mb must be positive number
      - fstype must be: xfs, ext4, ext3, ext2
  when: 
    - filesystem_dirs | length > 0
    - item.path is not defined or item.lv_name is not defined or 
      item.size_mb is not defined or (item.size_mb | int) <= 0 or
      (item.fstype is defined and item.fstype not in ['xfs', 'ext4', 'ext3', 'ext2'])
  loop: "{{ filesystem_dirs }}"