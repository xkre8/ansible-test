---
- name: Handle Volume Group creation/extension
  block:
    - name: Create new Volume Group
      community.general.lvg:
        vg: "{{ volume_group_name }}"
        pvs: "{{ lvm_device }}"
        state: present
      when: vg_action == 'create'
      register: vg_create_result

    - name: Extend existing Volume Group
      community.general.lvg:
        vg: "{{ volume_group_name }}"
        pvs: "{{ lvm_device }}"
        state: present
      when: vg_action == 'extend'
      register: vg_extend_result

    - name: Display VG operation result
      ansible.builtin.debug:
        msg: |
          📦 Volume Group Operation Complete:
          {% if vg_action == 'create' %}
          ✅ Created VG '{{ volume_group_name }}' on {{ lvm_device }}
          {% elif vg_action == 'extend' %}
          ✅ Extended VG '{{ volume_group_name }}' with {{ lvm_device }}
          {% else %}
          📋 Using existing VG '{{ volume_group_name }}'
          {% endif %}

  when: vg_action in ['create', 'extend']

- name: Verify VG exists after creation
  ansible.builtin.command: vgs {{ volume_group_name }}
  register: vg_verify
  changed_when: false
  failed_when: vg_verify.rc != 0

- name: Get VG information after creation
  ansible.builtin.command: vgs --noheadings --units m {{ volume_group_name }} -o vg_name,vg_size,vg_free
  register: vg_info
  changed_when: false

- name: Display VG information
  ansible.builtin.debug:
    msg: |
      📊 Volume Group Information:
      {{ vg_info.stdout }}

- name: Extract VG free space
  ansible.builtin.set_fact:
    available_space_mb: "{{ vg_info.stdout.split() | last | regex_replace('[mM]', '') | int }}"

- name: Calculate required space
  ansible.builtin.set_fact:
    lvm_filesystems: "{{ filesystem_dirs | selectattr('create_lvm', 'equalto', true) | list }}"
    required_space_mb: "{{ filesystem_dirs | selectattr('create_lvm', 'equalto', true) | map(attribute='size_mb') | map('int') | sum }}"

- name: Validate space availability
  ansible.builtin.debug:
    msg: |
      💾 Space Validation:
      Required: {{ required_space_mb }}MB
      Available: {{ available_space_mb }}MB
      Status: {% if (required_space_mb | int) <= (available_space_mb | int) %}✅ OK{% else %}❌ Insufficient{% endif %}

- name: Fail if insufficient space
  ansible.builtin.fail:
    msg: |
      ❌ Insufficient space in VG '{{ volume_group_name }}'
      Required: {{ required_space_mb }}MB, Available: {{ available_space_mb }}MB
  when: (required_space_mb | int) > (available_space_mb | int)

- name: Create Logical Volumes
  community.general.lvol:
    vg: "{{ volume_group_name }}"
    lv: "{{ item.lv_name }}"
    size: "{{ item.size_mb }}m"
    state: present
  loop: "{{ lvm_filesystems }}"
  register: lv_results

- name: Display LV results
  ansible.builtin.debug:
    msg: |
      💾 Logical Volumes Created:
      {% for result in lv_results.results %}
      - {{ result.item.lv_name }}: {{ result.item.size_mb }}MB {% if result.changed %}(NEW){% else %}(EXISTS){% endif %}
      {% endfor %}