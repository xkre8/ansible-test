---
- name: Get system disk information
  ansible.builtin.command: lsblk -ndo NAME,SIZE,TYPE,MOUNTPOINT,FSTYPE
  register: system_disks
  changed_when: false

- name: Display available disks for reference
  ansible.builtin.debug:
    msg: |
      Available block devices:
      {{ system_disks.stdout }}
      Selected LVM device: {{ lvm_device }}

- name: Check if selected disk exists
  ansible.builtin.stat:
    path: "{{ lvm_device }}"
  register: disk_exists

- name: Fail if disk doesn't exist
  ansible.builtin.fail:
    msg: |
      ‚ùå Selected disk {{ lvm_device }} does not exist!
      üìã Available disks:
      {{ system_disks.stdout }}
  when: not disk_exists.stat.exists

- name: Check disk usage status
  ansible.builtin.shell: |
    set -e
    if pvdisplay {{ lvm_device }} >/dev/null 2>&1; then
      echo "pv_exists"
    elif lsblk -n {{ lvm_device }} | grep -q part; then  
      echo "has_partitions"
    elif findmnt {{ lvm_device }} >/dev/null 2>&1; then
      echo "mounted"
    else
      echo "available"
    fi
  register: disk_usage_status
  changed_when: false

- name: Display disk status information
  ansible.builtin.debug:
    msg: |
      Disk {{ lvm_device }} status: {{ disk_usage_status.stdout }}
      {% if disk_usage_status.stdout == "pv_exists" %}
      ‚ö†Ô∏è  WARNING: Disk already has a Physical Volume - will use existing PV
      {% elif disk_usage_status.stdout == "has_partitions" %}
      ‚ö†Ô∏è  WARNING: Disk has existing partitions
      {% elif disk_usage_status.stdout == "mounted" %}
      ‚ö†Ô∏è  WARNING: Disk is currently mounted
      {% else %}
      ‚úÖ Disk is available for LVM use
      {% endif %}

- name: Confirm disk usage for non-available disks
  ansible.builtin.pause:
    prompt: |
      Disk {{ lvm_device }} is {{ disk_usage_status.stdout }}.
      Continue anyway? [y/N]
  register: disk_confirm
  when: 
    - disk_usage_status.stdout != "available"
    - not force_disk_usage | default(false)

- name: Abort if user declined
  ansible.builtin.fail:
    msg: "Operation aborted by user"
  when:
    - disk_confirm is defined
    - disk_confirm.user_input | lower not in ['y', 'yes']