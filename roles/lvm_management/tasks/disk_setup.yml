---
- name: Get disk information
  ansible.builtin.command: lsblk -ndo NAME,SIZE,TYPE,MOUNTPOINT
  register: disk_info
  changed_when: false

- name: Display disk information
  ansible.builtin.debug:
    msg: |
      💿 Available Disks:
      {{ disk_info.stdout }}
      
      Selected Device: {{ lvm_device }}

- name: Check if disk exists
  ansible.builtin.stat:
    path: "{{ lvm_device }}"
  register: disk_exists

- name: Fail if disk not found
  ansible.builtin.fail:
    msg: |
      ❌ Disk {{ lvm_device }} not found!
      Available disks:
      {{ disk_info.stdout }}
  when: not disk_exists.stat.exists

- name: Check disk status
  ansible.builtin.shell: |
    if pvdisplay {{ lvm_device }} >/dev/null 2>&1; then
      echo "has_pv"
    elif lsblk -n {{ lvm_device }} | grep -q part; then  
      echo "has_partitions"
    elif findmnt {{ lvm_device }} >/dev/null 2>&1; then
      echo "mounted"
    else
      echo "available"
    fi
  register: disk_status
  changed_when: false

- name: Display disk status
  ansible.builtin.debug:
    msg: |
      🔍 Disk {{ lvm_device }} status: {{ disk_status.stdout }}
      {% if disk_status.stdout == "available" %}
      ✅ Safe to use
      {% else %}
      ⚠️ Disk has existing data - proceed with caution
      {% endif %}

- name: Confirm disk usage if not available
  ansible.builtin.pause:
    prompt: "Disk {{ lvm_device }} is {{ disk_status.stdout }}. Continue? (y/N)"
  register: confirm_disk
  when:
    - disk_status.stdout != "available"
    - not (force_disk_usage | default(false) | bool)

- name: Abort on user decline
  ansible.builtin.fail:
    msg: "❌ Operation cancelled by user"
  when:
    - confirm_disk is defined
    - confirm_disk.user_input | default('n') | lower not in ['y', 'yes']