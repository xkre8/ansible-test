---
- name: "Debug user_yml variable"
  ansible.builtin.debug:
    var: user_yml

- name: "Convert user_yml to users list if provided"
  ansible.builtin.set_fact:
    users: "{{ (user_yml | from_yaml) if user_yml is defined and user_yml | length > 5 else users }}"
  when: user_yml is defined

- name: "Detect OS and set default shell"
  ansible.builtin.set_fact:
    os_default_shell: >-
      {%- if ansible_os_family == 'RedHat' or ansible_os_family == 'CentOS' -%}
        /bin/bash
      {%- elif ansible_os_family == 'Debian' or ansible_os_family == 'Ubuntu' -%}
        /bin/bash
      {%- elif ansible_os_family == 'SUSE' -%}
        /bin/bash
      {%- elif ansible_os_family == 'Alpine' -%}
        /bin/ash
      {%- elif ansible_os_family == 'FreeBSD' -%}
        /bin/sh
      {%- elif ansible_os_family == 'OpenBSD' -%}
        /bin/ksh
      {%- elif ansible_os_family == 'Solaris' -%}
        /bin/bash
      {%- elif ansible_os_family == 'AIX' -%}
        /bin/ksh
      {%- else -%}
        /bin/sh
      {%- endif -%}

- name: "Check if specified groups exist (gid field)"
  ansible.builtin.command: getent group "{{ item }}"
  register: gid_check
  failed_when: false
  changed_when: false
  loop: "{{ users | selectattr('gid', 'defined') | selectattr('gid', '!=', '') | map(attribute='gid') | list | unique }}"
  when: users | selectattr('gid', 'defined') | selectattr('gid', '!=', '') | list | length > 0

- name: "Check if specified groups exist (groupname field)"
  ansible.builtin.command: getent group "{{ item }}"
  register: groupname_check
  failed_when: false
  changed_when: false
  loop: "{{ users | selectattr('groupname', 'defined') | selectattr('groupname', '!=', '') | map(attribute='groupname') | list | unique }}"
  when: users | selectattr('groupname', 'defined') | selectattr('groupname', '!=', '') | list | length > 0

- name: "Check if additional_groups exist"
  ansible.builtin.command: getent group "{{ item.1 }}"
  register: additional_groups_check
  failed_when: false
  changed_when: false
  loop: "{{ users | selectattr('additional_groups', 'defined') | subelements('additional_groups') }}"
  when: users | selectattr('additional_groups', 'defined') | list | length > 0

- name: "Identify missing groups and stop if any found"
  ansible.builtin.set_fact:
    missing_gid_groups: "{{ (gid_check.results | default([])) | selectattr('rc', '!=', 0) | map(attribute='item') | list }}"
    missing_groupname_groups: "{{ (groupname_check.results | default([])) | selectattr('rc', '!=', 0) | map(attribute='item') | list }}"
    missing_additional_groups: "{{ (additional_groups_check.results | default([])) | selectattr('rc', '!=', 0) | map(attribute='item.1') | list }}"

- name: "Debug missing groups and FAIL if any found"
  ansible.builtin.fail:
    msg: |
      ❌ MISSING GROUPS DETECTED - STOPPING EXECUTION ❌
      
      Missing GID groups: {{ missing_gid_groups | join(', ') if missing_gid_groups | length > 0 else 'None' }}
      Missing groupname groups: {{ missing_groupname_groups | join(', ') if missing_groupname_groups | length > 0 else 'None' }}
      Missing additional_groups: {{ missing_additional_groups | join(', ') if missing_additional_groups | length > 0 else 'None' }}
      
      Please create these groups first or fix the configuration!
  when: 
    - (missing_gid_groups | length > 0) or 
      (missing_groupname_groups | length > 0) or 
      (missing_additional_groups | length > 0)

- name: "Generate processed users with random values"
  ansible.builtin.set_fact:
    processed_users: "{{ processed_users | default([]) + [processed_user] }}"
  vars:
    random_username: "user_{{ ansible_date_time.epoch }}_{{ 999999 | random }}"
    random_uid: "{{ range(uid_min, uid_max) | random }}"
    random_password: "{{ lookup('password', '/dev/null length=' + password_length|string + ' chars=ascii_letters,digits') }}"
    
    final_username: "{{ item.username if (item.username is defined and item.username != '') else random_username }}"
    final_uid: "{{ item.uid if (item.uid is defined and item.uid != '') else random_uid }}"
    final_password: "{{ item.password if (item.password is defined and item.password != '') else random_password }}"
    final_home: "{{ item.home_directory if (item.home_directory is defined and item.home_directory != '') else '/home' }}"
    
    # ถ้า gid ว่าง ให้ใช้ users และ uid: 1000
    final_gid: "{{ item.gid if (item.gid is defined and item.gid != '') else 'users' }}"
    final_uid_adjusted: "{{ 1000 if (item.gid is not defined or item.gid == '') else final_uid }}"
    
    processed_user:
      name: "{{ final_username }}"
      uid: "{{ final_uid_adjusted }}"
      group: "{{ final_gid }}"
      password: "{{ final_password }}"
      home: "{{ final_home }}/{{ final_username }}"
      shell: "{{ item.shell | default(os_default_shell) }}"
      groups: "{{ ([item.groupname] if (item.groupname is defined and item.groupname != '') else []) + (item.additional_groups | default([])) }}"
      comment: "{{ item.comment | default('Managed by Ansible') }}"
      # Track what was generated
      generated_uid: "{{ item.uid is not defined or item.uid == '' }}"
      generated_password: "{{ item.password is not defined or item.password == '' }}"
      generated_username: "{{ item.username is not defined or item.username == '' }}"
  loop: "{{ users }}"
  when: users | length > 0

- name: "Create users"
  ansible.builtin.user:
    name: "{{ item.name }}"
    uid: "{{ item.uid }}"
    group: "{{ item.group }}"
    groups: "{{ item.groups | join(',') if item.groups | length > 0 else omit }}"
    password: "{{ item.password | password_hash('sha512') }}"
    home: "{{ item.home }}"
    shell: "{{ item.shell }}"
    create_home: "{{ create_home }}"
    comment: "{{ item.comment }}"
    state: present
  loop: "{{ processed_users | default([]) }}"
  when: processed_users is defined and processed_users | length > 0

- name: "Set home directory permissions"
  ansible.builtin.file:
    path: "{{ item.home }}"
    owner: "{{ item.name }}"
    group: "{{ item.group }}"
    mode: '0755'
    state: directory
  loop: "{{ processed_users | default([]) }}"
  when: 
    - create_home | bool
    - processed_users is defined

- name: "Display comprehensive user creation report"
  ansible.builtin.debug:
    msg: |
      
      🎯 === USER CREATION SUMMARY REPORT === 🎯
      
      📊 Overview:
      ─────────────────────────────────────────
      Total users created: {{ processed_users | default([]) | length }}
      OS detected: {{ ansible_os_family }}
      Default shell used: {{ os_default_shell }}
      
      👥 User Details:
      ─────────────────────────────────────────
      {% for user in processed_users | default([]) %}
      User: {{ user.name }}
        ├── UID: {{ user.uid }}{% if user.generated_uid %} (🎲 RANDOM){% endif %}
        ├── Primary Group: {{ user.group }}
        ├── Additional Groups: {{ user.groups | join(', ') if user.groups | length > 0 else 'None' }}
        ├── Password: {% if user.generated_password %}🎲 RANDOM GENERATED{% else %}✅ User Provided{% endif %}
        ├── Home: {{ user.home }}
        ├── Shell: {{ user.shell }}
        {% if user.generated_username %}├── Username: 🎲 RANDOM GENERATED{% endif %}
        └── Comment: {{ user.comment }}
      
      {% endfor %}
      
      🔑 Generated Credentials:
      ─────────────────────────────────────────
      {% for user in processed_users | default([]) %}
      {% if user.generated_password or user.generated_uid or user.generated_username %}
      {{ user.name }}:
      {% if user.generated_username %}  - Username: {{ user.name }} (generated){% endif %}
      {% if user.generated_uid %}  - UID: {{ user.uid }} (generated){% endif %}
      {% if user.generated_password %}  - Password: {{ user.password }} (🚨 SAVE THIS!){% endif %}
      
      {% endif %}
      {% endfor %}
  when: processed_users is defined and processed_users | length > 0