---
# === Parse Input Data First ===
- name: "Parse service_requests_yml if provided"
  ansible.builtin.set_fact:
    parsed_service_requests: "{{ service_requests_yml | from_yaml if service_requests_yml is string else service_requests_yml }}"
  when: 
    - service_requests_yml is defined
    - service_requests_yml != ''

- name: "Extract users from service_requests_yml"
  ansible.builtin.set_fact:
    users: "{{ all_users }}"
  vars:
    all_users: >-
      {%- set result = [] -%}
      {%- for sr in parsed_service_requests | default([]) -%}
        {%- for user in sr.users | default([]) -%}
          {%- set _ = result.append(user) -%}
        {%- endfor -%}
      {%- endfor -%}
      {{ result }}
  when: 
    - parsed_service_requests is defined
    - parsed_service_requests | length > 0

- name: "Use user_yml if service_requests_yml not provided"
  ansible.builtin.set_fact:
    users: "{{ user_yml | from_yaml if user_yml is string else user_yml }}"
  when: 
    - service_requests_yml is not defined or service_requests_yml == ''
    - user_yml is defined
    - user_yml != ''

- name: "Validate: users variable is defined"
  ansible.builtin.assert:
    that:
      - users is defined
      - users | length > 0
    fail_msg: |
      ❌ No users found!
      Please provide either:
        - service_requests_yml (SR-based format)
        - user_yml (legacy flat format)

# === Get Existing Groups ===
- name: Get all existing groups
  ansible.builtin.getent:
    database: group
  register: all_groups_raw

- name: Extract group names
  ansible.builtin.set_fact:
    existing_groups: "{{ all_groups_raw.ansible_facts.getent_group.keys() | list }}"

# === Extract Required Groups from Users ===
- name: "Extract required groups safely"
  ansible.builtin.set_fact:
    required_groups: "{{ all_required_groups }}"
  vars:
    all_required_groups: >-
      {%- set groups = [] -%}
      {%- for user in users -%}
        {%- if user.groupname is defined and user.groupname != '' -%}
          {%- set _ = groups.append(user.groupname) -%}
        {%- endif -%}
        {%- if user.additional_groups is defined -%}
          {%- for group in user.additional_groups -%}
            {%- if group != '' -%}
              {%- set _ = groups.append(group) -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}
      {%- endfor -%}
      {{ groups | unique | list }}

- name: "Display required groups"
  ansible.builtin.debug:
    msg: |
      📋 Group Validation:
      ├─ Total users: {{ users | length }}
      ├─ Required groups: {{ required_groups | length }}
      └─ Groups: {{ required_groups | join(', ') }}
  when: debug_mode | default(false)

# === Check Missing Groups ===
- name: Check if all required groups exist
  ansible.builtin.set_fact:
    missing_groups: "{{ required_groups | difference(existing_groups) }}"

- name: "Display missing groups warning"
  ansible.builtin.debug:
    msg: |
      ⚠️  WARNING: Missing groups detected!
      Missing: {{ missing_groups | join(', ') }}
      
      {% if create_missing_groups | default(false) %}
      ✅ Will create missing groups automatically
      {% else %}
      ❌ Set create_missing_groups: true to auto-create
      {% endif %}
  when: 
    - missing_groups | length > 0

# === Create Missing Groups (if enabled) ===
- name: Create missing groups
  ansible.builtin.group:
    name: "{{ item }}"
    state: present
  loop: "{{ missing_groups }}"
  when: 
    - create_missing_groups | default(false)
    - missing_groups | length > 0

# === Fail if groups missing and auto-create disabled ===
- name: Fail if groups are missing
  ansible.builtin.fail:
    msg: |
      ❌ ERROR: The following groups do not exist:
      {{ missing_groups | join(', ') }}
      
      Solutions:
      1. Set create_missing_groups: true (recommended)
      2. Create groups manually before running this role
  when: 
    - missing_groups | length > 0
    - not create_missing_groups | default(false)

- name: "✅ Group validation passed"
  ansible.builtin.debug:
    msg: |
      ✅ All required groups exist or created successfully
      Total groups validated: {{ required_groups | length }}