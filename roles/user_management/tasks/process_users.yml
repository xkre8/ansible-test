---
# === Parse Input ===
- name: "Parse user configs"
  ansible.builtin.set_fact:
    parsed_user_configs: "{{ user_yml | from_yaml if user_yml is string else user_yml }}"

# === Convert service_requests_yml to user format (if provided) ===
- name: "Transform service_requests_yml"
  ansible.builtin.set_fact:
    parsed_user_configs: "{{ flattened_users }}"
  vars:
    parsed_srs: "{{ service_requests_yml | from_yaml }}"
    flattened_users: >-
      {%- set result = [] -%}
      {%- for sr in parsed_srs -%}
        {%- for user in sr.users -%}
          {%- set u = user | combine({
            'name': user.username,
            'email': sr.email,
            'sr_number': sr.sr_number,
            'owner_name': sr.owner_name,
            'tel': sr.tel
          }) -%}
          {%- set _ = result.append(u) -%}
        {%- endfor -%}
      {%- endfor -%}
      {{ result }}
  when: service_requests_yml is defined and service_requests_yml != ''

# === Fix empty strings (uid, gid, password) ===
- name: "Normalize empty values"
  ansible.builtin.set_fact:
    normalized_users: >-
      {%- set result = [] -%}
      {%- for user in parsed_user_configs -%}
        {%- set fixed = user | combine({
          'uid': (user.uid | default('')) if (user.uid | default('') != '') else omit,
          'gid': (user.gid | default('')) if (user.gid | default('') != '') else omit,
          'password': (user.password | default('')) if (user.password | default('') != '') else ''
        }) -%}
        {%- set _ = result.append(fixed) -%}
      {%- endfor -%}
      {{ result }}

# === Generate passwords ===
- name: "Generate passwords for users without password"
  ansible.builtin.set_fact:
    processed_users: >-
      {%- set result = [] -%}
      {%- for user in normalized_users -%}
        {%- set needs_pwd = (user.password == '') -%}
        {%- set random_pwd = lookup('password', '/dev/null length=16 chars=ascii_letters,digits') if needs_pwd else '' -%}
        {%- set enhanced = user | combine({
          'password': random_pwd if needs_pwd else user.password,
          'random_password': needs_pwd,
          'home': user.home_directory | default('/home/' + user.name),
          'groups': user.additional_groups | default([]),
          'group': user.groupname | default('users')
        }) -%}
        {%- set _ = result.append(enhanced) -%}
      {%- endfor -%}
      {{ result }}